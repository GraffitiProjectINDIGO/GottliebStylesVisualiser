function GottliebStylesVisualiser

%GottliebStylesVISUALISER is a small Graphical User Interface to illustrate
%   how Lisa Gottlieb defined various graffiti styles in 2008.
%
%
%   Input
%   -----
%       This function does not need any input.
%
%
%   Outputs
%   -------
%       This function does not create any output.
%
%
%   Usage
%   -----
%       Just run the function to display the GUI.
%
%
%   Remarks
%   -------
%       None.
%
%
%   Dependencies
%   ------------
%       None.
%
%
%   History:
%   --------
%   2023-05-22  Function created (GV).
%   2023-09-09  Function header added; indicated match with Gottlieb style;
%               removed some errors in Gottlieb style codes; added a simple
%               menu; changed the colours to a softer version of the
%               project INDIGO colour scheme.
%
%
%  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  %
%   Created: 2023-05-22 by Geert J. Verhoeven @ project INDIGO
%   Last modified: 2023-09-09 by Geert J. Verhoeven
%   Author: Geert Verhoeven
%   e-mail: info [at] projectindigo [dot] eu
%   Release: 1.0
%   Release date: 2023-09-09
%   Full research at: https://projectindigo.eu
%  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  %


%%                  Perform some initialisation tasks.                   %%
%  =====================================================================  %
% First check if an instance of GottliebStylesVisualiser is still open.
% ---------------------------------------------------------------------
existingGottliebGUI = findobj('Type', 'Figure', 'Name',...
    'Graffiti Styles Visualiser | version 1.0');
if ~isempty(existingGottliebGUI)
    uiwait(msgbox (['An open instance of the Gottlieb Styles Visualiser ', ...
        'was found, which will now be closed.']))
    close(findobj('Type', 'Figure', 'Name', ...
        'Graffiti Styles Visualiser | version 1.0'))
end

% Set all lists with style names and codes.
% -----------------------------------------
styleNotationsGottlieb = {'A1C2F3I5J2K2', 'A2B3H2I3L3M2', ...
    'A3B1C2D1E1G1I2J2K1M1', 'A3C2D2E1F3G2H2M1', 'A3G1H1I1J2K1L6M1', ...
    'B2D2E1F3H2I3J1K1M1', 'B3D2E1F3G2H1I2J1K1L2M1', 'C2D2H3I2J2K2', ...
    'D2E1H2I3J2L5M1', 'D2F3G2H3K1L2M1', 'D3E3F3H3J2K2M1', ...
    'D4E2J2L1L2M1', 'E1G1M1', 'E1I5J1M1'};

styleNamesGottlieb = {'Abstract', 'TFP', 'Silvers', 'CTK', 'Pichador', ...
    'Semi-wild', 'Los Angeles Cholo-based', 'Swedish Train', ...
    'Neo Classic American Freight', 'East Coast Piecing Style', ...
    'No-neg', 'Dimensional', 'Dortmund', 'Wild'};


% Set all lists with style descriptions.
% --------------------------------------
descriptionAbstract = ['In addition to the characteristics listed ',...
    'below, Abstract pieces are described by graffiti art experts as ',...
    '"very organic in shape." One expert notes that pieces "might fit ',...
    'the shape of a crescent, a check mark, a wedge, or some other ', ...
    'non-quadrilateral." The Abstract style is also known as ', ...'
    '"Transcend," the name of the crew chiefly associated with this ',...
    'style.'];
descriptionTFP = ['The name TFP refers to The Fantastic Partners crew,',...
    ' which was formed in New York City during the 1970s and still ',...
    'exists today. During the 1980s TFP was associated mainly with ',...
    'train pieces; the 1990s were marked by experimentation in wall ',...
    'pieces. One graffiti art expert notes that "this style is very ',...
    'colorful and eyecatching and many people feel this has ', ...
    'historically been the high point of graffiti.”'];
descriptionSilvers = ['Found throughout the graffiti art world, Silver ',...
    'pieces are named for their silver-colored letter fill. This style ',...
    'is also characterized by speed. According to one graffiti art ',...
    'expert, Silvers "are quickly painted, good for a tight spot or a ',...
    'tight schedule." In fact, the quick execution of Silver pieces ',...
    'informs many of their features. For example, Silver pieces often ',...
    'have Scrub fills (L4), the result of a technique used to fill-in ',...
    'letters very quickly. By the same token, Silvers are devoid of ',...
    'other fill effects, such as Fades and Shines, which are ',...
    'time-consuming to create.'];
descriptionCTK = ['The Name CTK refers to the Crime Time Kings, a ',...
    'prolific European crew. One graffiti art expert suggests, "What is',...
    ' so important about CTK is that their influence across Europe,s ',...
    'incipient graffiti scene in the middle 1980s was almost total.”'];
descriptionPichador = ['The Pichador style is derived from Pichação, a',...
    ' tag-based lettering style native to SIo Paulo, Brazil. Pichação ',...
    'tags are created using buckets of latex paint and 3-inch paint ',...
    'rollers. The use of rollers produces letters of uniform width—a ',...
    'hallmark of Pichador pieces as well.'];
descriptionSemiWild = ['The name "Semi-wild. refers to the fact that this style',...
    ' is, in the words of one graffiti art expert, "less severe" than ',...
    ' the Wild style. Specifically, Semiwild pieces tend to be legible',...
    ', a result of the letters having a standard, rather than ',...
    'intertwined overlap. Semi-wild is not simply "Wild-lite," however',...
    '; it is a distinct style with its own set of characteristics.'];
descriptionLosAngelesCholoBased = ['The phrase "Cholo-based" refers to',...
    ' the fact that the lettering in this style is based on graffiti ',...
    'created by Los Angeles Cholo gangs in the 1930s.'];
descriptionSwedishTrain = ['As with Silvers, Swedish Train pieces are executed ',...
    'quickly. As one graffiti art expert notes, "There is very little ',...
    'time for anything extraneous." This person also points out that ',...
    'the style "is very bubbly and has exaggerated proportions.”'];
descriptionNeoClassicAmericanFreight = ['As one graffiti art expert ',...
    'explains, this "neo classic" style emerged as "a reaction to very',...
    ' abstract and unreadable freight pieces that were popular in ',...
    '1999–2000." The Neo Classic American Freight style "hearkens back',...
    ' to subway days [of] the 80,s and takes shapes and connections ',...
    'that were popular then.”'];
descriptionEastCoastPiecingStyle = ['As indicated by its name, the ',...
    'East Coast Piecing style was developed in cities in the eastern ',...
    'United States, including Baltimore, Washington, D.C., and ',...
    'Philadelphia. "This is a very complex, labor intensive style," ',...
    'one graffiti art expert explains. "It was born in abandoned train',...
    ' tunnels and warehouse walls. Writers would spend all day trying ',...
    'to create the most complicated stylish piece.”'];
descriptionNoNeg = ['This style originated in Boston, Massachusetts, ',...
    'and its name refers to the fact the letters in No-neg pieces have',...
    ' little or no negative space.'];
descriptionDimensional = ['Introduced by writers in Germany, this ',...
    'style reached the height of its international popularity during ',...
    'the 1990s. As the name suggests, the entirety of the letters in ',...
    'Dimensional pieces appear inherently 3-dimensional—a feat ',...
    'achieved through a combination of directional highlights and ',...
    'fades. As one graffiti art expert explains, in other styles ',...
    '"the 3-dimensional aspect is ... just an effect added to more ',...
    'traditional letter forms.”'];
descriptionDortmund = ['The succinct style notation for the Dortmund ',...
    'style echoes one graffiti art expert,s assessment that "this is ',...
    'a stripped down style and there isn.t much focus on parts of the ',...
    'letters that aren,t utilitarian." Reflecting this spare aesthetic',...
    ', Dortmund pieces consist of "bold shapes" that are "very ',...
    'graphic" in nature. Named for its provenance in Dortmund, ',...
    'Germany, this style is predominantly train-based.'];
descriptionWild = ['Created in 1974 by the writer Tracy 168 and named ',...
    'for his crew, this style has become synonymous with New York City',...
    'subway writing.'];

styleDescriptionGottlieb = {descriptionAbstract, descriptionTFP, ...
    descriptionSilvers, descriptionCTK, descriptionPichador, ...
    descriptionSemiWild, descriptionLosAngelesCholoBased, ...
    descriptionSwedishTrain, descriptionNeoClassicAmericanFreight, ...
    descriptionEastCoastPiecingStyle, descriptionNoNeg, ...
    descriptionDimensional, descriptionDortmund, descriptionWild};

remarkAbstract = ['Abstract pieces can have any (or any combination) of ',...
    'the following: Fades (L2), Fill shapes (L3), and Shines (L5); ',...
    'conversely, pieces can have no fill effects whatsoever (L6)'];
remarkTFP = ['While the use of Fill shapes (L3) is a defining ', ...
    'characteristic of TFP, pieces in this style might also have Fades',...
    ' (L2), Scrub fills (L4), and/or Shines (L5)'];
remarkSilvers = '';
remarkCTK = '';
remarkPichador = '';
remarkSemiWild = '';
remarkLosAngelesCholoBased = ['While the use of Fades (L2) is a ', ...
    'defining characteristic of the Los Angeles Cholo-based style, ',...
    'pieces might also have Fill shapes (L3) and/or Shines (L5)'];
remarkSwedishTrain = '';
remarkNeoClassicAmericanFreight = ['Fill Effects: While Shines (L5) ', ...
    'are a defining characteristic of this style, pieces might also ',...
    'have Fades (L2) and/or Fill Shapes (L3)'];
remarkEastCoastPiecingStyle = ['Fill Effects: While the use of Fades ', ...
    '(L2) is a defining characteristic of this style, pieces might ',...
    'also have Fill shapes (L3) and/or Shines (L5)'];
remarkNoNeg = '';
remarkDimensional = ['This style has two defining fill effects (L1 and ',...
    'L2) which does not work with the radiobuttons as those are ',...
    'limited to one value. In addition, L3 is a pedominant characteristic.'];
remarkDortmund = '';
remarkWild = '';

styleRemarkGottlieb = {remarkAbstract, remarkTFP, ...
    remarkSilvers, remarkCTK, remarkPichador, ...
    remarkSemiWild, remarkLosAngelesCholoBased, ...
    remarkSwedishTrain, remarkNeoClassicAmericanFreight, ...
    remarkEastCoastPiecingStyle, remarkNoNeg, ...
    remarkDimensional, remarkDortmund, remarkWild};

styleGottliebID = 1;
styleNameGottlieb = styleNamesGottlieb{styleGottliebID};
styleString = [];
predominantCharacteristicsString = [];
otherCharacteristicsString = [];

% Create the main interface settings.
% -----------------------------------
sizeGUI = get(groot, 'Screensize');
width = 1000;
height = 600;
positionGUI = [sizeGUI(3)/2-width/2, sizeGUI(4)/2-height/2, width, height];
backgroundColour = [0.80 0.80 0.80];
backgroundColourLight = [0.90 0.90 0.90];
backgroundColourLighter = [0.95 0.95 0.95];

backGroundColourDefining = "#d1a7b7";
backGroundColourPredominant = "#f2d2b1";
backGroundColourOther = "#97d1e5";
styleMatchColour = "#270089";

buttonHeight = 0.28;
% checkBoxLength = 0.85;
% checkBoxHeight = 0.12;
% titleFont = 0.6;
normalFont = 0.55;
% paramValuesFont = 0.55;
% buttonFont = 0.4;
% paramaterCombinationsFont = 0.55;
currentVersionGUI = '1.0 build 2023-09-09';


%%                      Build the main GUI elements.                     %%
%  ====================================================================== %
mainGUIWindow = figure('MenuBar', 'None',...
    'Units', 'Pixels',...
    'Position', positionGUI,...
    'Name', 'Graffiti Styles Visualiser | version 1.0',...
    'NumberTitle', 'Off',...
    'Toolbar', 'None',...
    'Menu', 'None',...
    'Color', backgroundColour,...
    'Visible', 'On',...
    'UserData', 'loadGottliebStlyesDialog');

upperLeftFrame = uipanel('Parent', mainGUIWindow,...
    'Units', 'Normalized',...
    'FontUnits', 'Normalized',...
    'BorderType', 'None',....
    'BackgroundColor', backgroundColour,...
    'Position', [0 0.7 0.6 0.3],...
    'UserData', 'RightSideFrame');

upperRightFrame = uipanel('Parent', mainGUIWindow,...
    'Units', 'Normalized',...
    'FontUnits', 'Normalized',...
    'BorderType', 'None',....
    'BackgroundColor', backgroundColour,...
    'Position', [0.6 0.7 0.4 0.3],...
    'UserData', 'RightSideFrame');

lowerFrame = uipanel('Parent', mainGUIWindow,...
    'Units', 'Normalized',...
    'FontUnits', 'Normalized',...
    'BorderType', 'None',....
    'BackgroundColor', backgroundColour,...
    'Position', [0 0 1 0.7],...
    'UserData', 'LeftSideFrame');

styleFrame = uipanel('Parent', upperLeftFrame,...
    'Units', 'Normalized',...
    'FontUnits', 'Normalized',...
    'BorderType', 'None',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.0075 0.01 0.985 0.96],...
    'UserData', 'imageOneFrame');

stringFrame = uipanel('Parent', upperRightFrame,...
    'Units', 'Normalized',...
    'FontUnits', 'Normalized',...
    'BorderType', 'None',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.0075 0.01 0.975 0.96],...
    'UserData', 'imageOneFrame');

categoryFrame = uipanel('Parent', lowerFrame,...
    'Units', 'Normalized',...
    'FontUnits', 'Normalized',...
    'BorderType', 'None',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.005 0.015 0.99 0.97],...
    'UserData', 'imageOneFrame');


%% Define the GUI menu.
% ---------------------
menuGUI = uimenu ('Label', '&GUI');
uimenu ('Label', '&New',...
    'Parent', menuGUI,...
    'CallBack', @CloseAndOpen,...
    'Accelerator', 'N')
uimenu ('Label', '&Quit',...
    'Parent', menuGUI,...
    'CallBack', @Close,...
    'Separator', 'On',...
    'Accelerator', 'Q')

menuGUI  = uimenu ('Label', '&Info');
uimenu ('Label', '&About',...
    'Parent', menuGUI,...
    'CallBack', @About,...
    'Accelerator', 'A')
uimenu ('Label', '&Show book cover', ...
    'Parent', menuGUI, ...
    'CallBack', @ShowBookCover, ...
    'Accelerator', 'S')


%% Style frame.
% ------------
stylesGottliebTitle = uicontrol ('Style', 'Text',...
    'Parent', styleFrame,...
    'String', 'Gottlieb style',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.02 0.8 0.175 buttonHeight/2],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'FontWeight', 'Bold');

styleNamesGottliebDropdown = uicontrol ('Style', 'PopupMenu',...
    'Parent', styleFrame,...
    'Units', 'Normalized',...
    'Position', [0.225 0.56 0.36 0.4],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.2,...
    'String', styleNamesGottlieb,...
    'Value', styleGottliebID,...
    'Callback', @DisplayGotttliebStyleNotation,...
    'UserData', 'styleNamesGottliebDropdown');

styleNotationsGottliebDropdown = uicontrol ('Style', 'PopupMenu',...
    'Parent', styleFrame,...
    'Units', 'Normalized',...
    'Position', [0.62 0.56 0.36 0.4],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.2,...
    'String', styleNotationsGottlieb,...
    'Value', styleGottliebID,...
    'Callback', @DisplayGotttliebStyleName,...
    'UserData', 'styleNotationsGottliebDropdown');

styleDescriptionGottliebText = uicontrol ('Style', 'Text',...
    'Parent', styleFrame,...
    'String', styleDescriptionGottlieb(styleGottliebID),...
    'BackgroundColor', backgroundColourLighter,...
    'Units', 'Normalized',...
    'Position', [0.225 0.3 0.75 0.45],...
    'HorizontalAlignment', 'Left',...
    'FontUnits', 'Normalized',...
    'FontSize', 0.15,...
    'FontAngle', 'Italic');

styleRemarkGottliebText = uicontrol ('Style', 'Text',...
    'Parent', styleFrame,...
    'String', styleRemarkGottlieb(styleGottliebID),...
    'BackgroundColor', backgroundColourLighter,...
    'Units', 'Normalized',...
    'Position', [0.225 0.05 0.75 0.2],...
    'HorizontalAlignment', 'Left',...
    'FontUnits', 'Normalized',...
    'FontSize', 0.3,...
    'FontAngle', 'Italic');


%% Stringframe
characteristicsTitleText = uicontrol ('Style', 'Text',...
    'Parent', stringFrame,...
    'String', 'Curent style characteristics',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.05 0.82 0.75 buttonHeight/2],...
    'HorizontalAlignment', 'Center',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'FontWeight', 'Bold');

styleStringTitleText = uicontrol ('Style', 'Text',...
    'Parent', stringFrame,...
    'String', 'Defining',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.02 0.61 0.25 buttonHeight/2],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'FontAngle', 'Italic');

styleStringDisplayText = uicontrol ('Style', 'Text',...
    'Parent', stringFrame,...
    'String', '-',...
    'BackgroundColor', backgroundColourLighter,...
    'Units', 'Normalized',...
    'Position', [0.3 0.62 0.675 buttonHeight/2.2],...
    'HorizontalAlignment', 'Left',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

predominantCharacteristicsStringTitleText = uicontrol ('Style', 'Text',...
    'Parent', stringFrame,...
    'String', 'Predominant',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.02 0.41 0.25 buttonHeight/2],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'FontAngle', 'Italic');

predominantCharacteristicsStringDisplayText = uicontrol ('Style', 'Text',...
    'Parent', stringFrame,...
    'String', '-',...
    'BackgroundColor', backgroundColourLighter,...
    'Units', 'Normalized',...
    'Position', [0.3 0.42 0.675 buttonHeight/2.2],...
    'HorizontalAlignment', 'Left',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

otherCharacteristicsStringTitleText = uicontrol ('Style', 'Text',...
    'Parent', stringFrame,...
    'String', 'Other',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.02 0.21 0.25 buttonHeight/2],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'FontAngle', 'Italic');

otherCharacteristicsStringDisplayText = uicontrol ('Style', 'Text',...
    'Parent', stringFrame,...
    'String', '-',...
    'BackgroundColor', backgroundColourLighter,...
    'Units', 'Normalized',...
    'Position', [0.3 0.22 0.675 buttonHeight/2.2],...
    'HorizontalAlignment', 'Left',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

styleGottliebStringTitleText = uicontrol ('Style', 'Text',...
    'Parent', stringFrame,...
    'String', 'Gottlieb match',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.02 0.01 0.25 buttonHeight/2],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'FontAngle', 'Italic');

styleGottliebStringDisplayText = uicontrol ('Style', 'Text',...
    'Parent', stringFrame,...
    'String', 'Yes',...
    'BackgroundColor', backgroundColourLighter,...
    'Units', 'Normalized',...
    'Position', [0.3 0.02 0.675 buttonHeight/2.2],...
    'HorizontalAlignment', 'Left',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);


%% Categories - All radio buttions
% -----------------------Legibility
categoryGottliebLegibilityText = uicontrol ('Style', 'Text',...
    'Parent', categoryFrame,...
    'String', 'Legibility',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.005 0.925 0.125 0.06],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

legibilityDPOGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.005 0.89 0.125 0.038],...
    'BorderType', 'None');

legibilityDefiningToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', legibilityDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.1 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Defining',...
    'Value', 1,...
    'Callback', {@SetDefiningPredominantOther, 'legibilityDefining'});

legibilityPredominantToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', legibilityDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.4 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Predom',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'legibilityPredominant'});

legibilityOtherToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', legibilityDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.7 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Other',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'legibilityOther'});

legibilityGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.135 0.835 0.195 0.15],...
    'Visible', 'On',...
    'BorderType', 'None');

legibilityIllegibleButton = uicontrol ('Style', 'RadioButton',...
    'Parent', legibilityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.666 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Illegible',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'legibilityGroup'});

legibilityPartiallyLegibleButton = uicontrol ('Style', 'RadioButton',...
    'Parent', legibilityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.333 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Partially legible',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'legibilityGroup'});

legibilityLegibleButton = uicontrol ('Style', 'RadioButton',...
    'Parent', legibilityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Legible',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'legibilityGroup'});

legibilityIllegibleCodeText = uicontrol ('Style', 'Text',...
    'Parent', legibilityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.666 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'A1');

legibilityPartiallyLegibleCodeText = uicontrol ('Style', 'Text',...
    'Parent', legibilityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.333 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'A2');

legibilityLegibleCodeText = uicontrol ('Style', 'Text',...
    'Parent', legibilityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'A3');

% -----------------------Number of colours
categoryGottliebNumberOfColoursText = uicontrol ('Style', 'Text',...
    'Parent', categoryFrame,...
    'String', 'Number of colours',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.005 0.725 0.125 0.06],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

numberOfColoursDPOGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.005 0.69 0.125 0.038],...
    'BorderType', 'None');

numberOfColoursDefiningToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', numberOfColoursDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.1 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Defining',...
    'Value', 1,...
    'Callback', {@SetDefiningPredominantOther, 'numberOfColoursDefining'});

numberOfColoursPredominantToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', numberOfColoursDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.4 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Predom',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'numberOfColoursPredominant'});

numberOfColoursOtherToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', numberOfColoursDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.7 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Other',...
    'Value', 0,...
    'Callback',{@SetDefiningPredominantOther, 'numberOfColoursOther'});

numberOfColoursGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.135 0.64 0.195 0.15],...
    'Visible', 'On',...
    'BorderType', 'None');

numberOfColoursTwoColoursButton = uicontrol ('Style', 'RadioButton',...
    'Parent', numberOfColoursGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.666 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', '2 colours',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'numberOfColoursGroup'});

numberOfColoursAtLeastThreeColoursButton = uicontrol ('Style', 'RadioButton',...
    'Parent', numberOfColoursGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.333 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'At least 3 colours',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'numberOfColoursGroup'});

numberOfColoursAtLeastFiveColoursButton = uicontrol ('Style', 'RadioButton',...
    'Parent', numberOfColoursGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'At least 5 colours',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'numberOfColoursGroup'});

numberOfColoursTwoColoursCodeText = uicontrol ('Style', 'Text',...
    'Parent', numberOfColoursGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.666 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'B1');

numberOfColoursAtLeastThreeColoursCodeText = uicontrol ('Style', 'Text',...
    'Parent', numberOfColoursGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.333 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'B2');

numberOfColoursAtLeastFiveColoursCodeText = uicontrol ('Style', 'Text',...
    'Parent', numberOfColoursGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'B3');

% -----------------------Symmetry
categoryGottliebSymmetryText = uicontrol ('Style', 'Text',...
    'Parent', categoryFrame,...
    'String', 'Symmetry',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.005 0.525 0.125 0.06],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

symmetryDPOGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.005 0.49 0.125 0.038],...
    'BorderType', 'None');

symmetryDefiningToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', symmetryDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.1 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Defining',...
    'Value', 1,...
    'Callback',  {@SetDefiningPredominantOther, 'symmetryDefining'});

symmetryPredominantToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', symmetryDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.4 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Predom',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'symmetryPredominant'});

symmetryOtherToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', symmetryDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.7 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Other',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'symmetryOther'});

symmetryGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.135 0.49 0.195 0.1],...
    'Visible', 'On',...
    'BorderType', 'None');

symmetrySymmetricalButton = uicontrol ('Style', 'RadioButton',...
    'Parent', symmetryGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Symmetry',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'symmetryGroup'});

symmetryAssymetricalButton = uicontrol ('Style', 'RadioButton',...
    'Parent', symmetryGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Assymetrical',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'symmetryGroup'});

symmetrySymmetricalCodeText = uicontrol ('Style', 'Text',...
    'Parent', symmetryGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'C1');

symmetryAssymetricalCodeText = uicontrol ('Style', 'Text',...
    'Parent', symmetryGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'C2');


% -----------------------Dimensionality
categoryGottliebDimensionalityText = uicontrol ('Style', 'Text',...
    'Parent', categoryFrame,...
    'String', 'Dimensionality',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.005 0.375 0.125 0.06],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

dimensionalityDPOGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.005 0.34 0.125 0.038],...
    'BorderType', 'None');

dimensionalityDefiningToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', dimensionalityDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.1 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Defining',...
    'Value', 1,...
    'Callback', {@SetDefiningPredominantOther, 'dimensionalityDefining'});

dimensionalityPredominantToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', dimensionalityDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.4 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Predom',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'dimensionalityPredominant'});

dimensionalityOtherToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', dimensionalityDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.7 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Other',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'dimensionalityOther'});

dimensionalityGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.135 0.24 0.195 0.2],...
    'Visible', 'On',...
    'BorderType', 'None');

dimensionality2DimensionalButton = uicontrol ('Style', 'RadioButton',...
    'Parent', dimensionalityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.75 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', '2-dimensional',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'dimensionalityGroup'});

dimensionality2DimensionalWith3DEffectsButton = uicontrol ('Style', 'RadioButton',...
    'Parent', dimensionalityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', '2-dimens. with 3D effects',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'dimensionalityGroup'});

dimensionalityReliefEffectButton = uicontrol ('Style', 'RadioButton',...
    'Parent', dimensionalityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.25 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Relief effect',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'dimensionalityGroup'});

dimensionality3DimensionalButton = uicontrol ('Style', 'RadioButton',...
    'Parent', dimensionalityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', '3-dimensional',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'dimensionalityGroup'});

dimensionality2DimensionalCodeText = uicontrol ('Style', 'Text',...
    'Parent', dimensionalityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.75 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'D1');

dimensionality2DimensionalWith3DEffectsCodeText = uicontrol ('Style', 'Text',...
    'Parent', dimensionalityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'D2');

dimensionalityReliefEffectCodeText = uicontrol ('Style', 'Text',...
    'Parent', dimensionalityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.25 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'D3');

dimensionality3DimensionalCodeText = uicontrol ('Style', 'Text',...
    'Parent', dimensionalityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'D4');


% -----------------------Letter outlines
categoryGottliebLetterOutlinesText = uicontrol ('Style', 'Text',...
    'Parent', categoryFrame,...
    'String', 'Letter outlines',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.005 0.135 0.125 0.06],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

letterOutlinesDPOGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.005 0.1 0.125 0.038],...
    'BorderType', 'None');

letterOutlinesDefiningToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', letterOutlinesDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.1 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Defining',...
    'Value', 1,...
    'Callback', {@SetDefiningPredominantOther, 'letterOutlinesDefining'});

letterOutlinesPredominantToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', letterOutlinesDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.4 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Predom',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'letterOutlinesPredominant'});

letterOutlinesOtherToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', letterOutlinesDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.7 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Other',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'letterOutlinesOther'});

letterOutlinesGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.135 0 0.195 0.2],...
    'Visible', 'On',...
    'BorderType', 'None');

letterOutlinesHardOnlyButton = uicontrol ('Style', 'RadioButton',...
    'Parent', letterOutlinesGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.75 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Hard only',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOutlinesGroup'});

letterOutlinesImpliedButton = uicontrol ('Style', 'RadioButton',...
    'Parent', letterOutlinesGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Implied',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOutlinesGroup'});

letterOutlinesInterruptedButton = uicontrol ('Style', 'RadioButton',...
    'Parent', letterOutlinesGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.25 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Interupted',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOutlinesGroup'});

letterOutlinesNonedButton = uicontrol ('Style', 'RadioButton',...
    'Parent', letterOutlinesGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'None',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOutlinesGroup'});

letterOutlinesHardOnlyCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOutlinesGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.75 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'E1');

letterOutlinesImpliedCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOutlinesGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'E2');

letterOutlinesInterruptedCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOutlinesGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.25 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'E3');

letterOutlinesNoneCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOutlinesGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'E4');


% -----------------------Linearity
categoryGottliebLinearityText = uicontrol ('Style', 'Text',...
    'Parent', categoryFrame,...
    'String', 'Linearity',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.335 0.925 0.125 0.06],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

linearityDPOGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.335 0.89 0.125 0.038],...
    'BorderType', 'None');

linearityDefiningToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', linearityDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.1 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Defining',...
    'Value', 1,...
    'Callback', {@SetDefiningPredominantOther, 'linearityDefining'});

linearityPredominantToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', linearityDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.4 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Predom',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'linearityPredominant'});

linearityOtherToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', linearityDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.7 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Other',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'linearityOther'});

linearityGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.465 0.835 0.195 0.15],...
    'Visible', 'On',...
    'BorderType', 'None');

linearityCurvedOnlyButton = uicontrol ('Style', 'RadioButton',...
    'Parent', linearityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.666 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Curved only',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'linearityGroup'});

linearityStraightOnlyButton = uicontrol ('Style', 'RadioButton',...
    'Parent', linearityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.333 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Straight only',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'linearityGroup'});

linearityCurvedAndStraightButton = uicontrol ('Style', 'RadioButton',...
    'Parent', linearityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Curved and straight',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'linearityGroup'});

linearityCurvedOnlyCodeText = uicontrol ('Style', 'Text',...
    'Parent', linearityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.666 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'F1');

linearityStraightOnlyCodeText = uicontrol ('Style', 'Text',...
    'Parent', linearityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.333 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'F2');

linearityCurvedAndStraightCodeText = uicontrol ('Style', 'Text',...
    'Parent', linearityGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'F3');


% -----------------------Letter strokes
categoryGottliebLetterStrokesText = uicontrol ('Style', 'Text',...
    'Parent', categoryFrame,...
    'String', 'Letter strokes',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.335 0.73 0.125 0.06],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

letterStrokesDPOGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.335 0.695 0.125 0.038],...
    'BorderType', 'None');

letterStrokesDefiningToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', letterStrokesDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.1 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Defining',...
    'Value', 1,...
    'Callback', {@SetDefiningPredominantOther, 'letterStrokesDefining'});

letterStrokesPredominantToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', letterStrokesDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.4 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Predom',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'letterStrokesPredominant'});

letterStrokesOtherToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', letterStrokesDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.7 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Other',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'letterStrokesOther'});

letterStrokesGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.465 0.69 0.195 0.1],...
    'Visible', 'On',...
    'BorderType', 'None');

letterStrokesUniformButton = uicontrol ('Style', 'RadioButton',...
    'Parent', letterStrokesGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Uniform',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterStrokesGroup'});

letterStrokesVariedButton = uicontrol ('Style', 'RadioButton',...
    'Parent', letterStrokesGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Varied',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterStrokesGroup'});

letterStrokesUniformCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterStrokesGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'G1');

letterStrokesVariedCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterStrokesGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'G2');


% -----------------------Negative space
categoryGottliebNegativeSpaceText = uicontrol ('Style', 'Text',...
    'Parent', categoryFrame,...
    'String', 'Negative space',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.335 0.58 0.125 0.06],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

negativeSpaceDPOGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.335 0.545 0.125 0.038],...
    'BorderType', 'None');

negativeSpaceDefiningToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', negativeSpaceDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.1 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Defining',...
    'Value', 1,...
    'Callback', {@SetDefiningPredominantOther, 'negativeSpaceDefining'});

negativeSpacePredominantToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', negativeSpaceDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.4 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Predom',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'negativeSpacePredominant'});

negativeSpaceOtherToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', negativeSpaceDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.7 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Other',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'negativeSpaceOther'});

negativeSpaceGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.465 0.49 0.195 0.15],...
    'Visible', 'On',...
    'BorderType', 'None');

negativeSpaceExaggeratedButton = uicontrol ('Style', 'RadioButton',...
    'Parent', negativeSpaceGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.66 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Exaggerated',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'negativeSpaceGroup'});

negativeSpaceStandardButton = uicontrol ('Style', 'RadioButton',...
    'Parent', negativeSpaceGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.33 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Standard',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'negativeSpaceGroup'});

negativeSpaceLimitedButton = uicontrol ('Style', 'RadioButton',...
    'Parent', negativeSpaceGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Limited',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'negativeSpaceGroup'});

negativeSpaceExaggeratedCodeText = uicontrol ('Style', 'Text',...
    'Parent', negativeSpaceGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.66 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'H1');

negativeSpaceStandardCodeText = uicontrol ('Style', 'Text',...
    'Parent', negativeSpaceGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.33 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'H2');

negativeSpaceLimitedCodeText = uicontrol ('Style', 'Text',...
    'Parent', negativeSpaceGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'H3');


% -----------------------Letter overlap
categoryGottliebLetterOverlapText = uicontrol ('Style', 'Text',...
    'Parent', categoryFrame,...
    'String', 'Letter overlap',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.335 0.375 0.125 0.06],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

letterOverlapDPOGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.335 0.34 0.125 0.038],...
    'BorderType', 'None');

letterOverlapDefiningToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', letterOverlapDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.1 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Defining',...
    'Value', 1,...
    'Callback', {@SetDefiningPredominantOther, 'letterOverlapDefining'});

letterOverlapPredominantToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', letterOverlapDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.4 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Predom',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'letterOverlapPredominant'});

letterOverlapOtherToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', letterOverlapDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.7 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Other',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'letterOverlapOther'});

letterOverlapGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.465 0.19 0.195 0.25],...
    'Visible', 'On',...
    'BorderType', 'None');

letterOverlapNoneButton = uicontrol ('Style', 'RadioButton',...
    'Parent', letterOverlapGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.8 0.8 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'None',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOverlapGroup'});

letterOverlapMinimalButton = uicontrol ('Style', 'RadioButton',...
    'Parent', letterOverlapGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.6 0.8 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Minimal',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOverlapGroup'});

letterOverlapStandardButton = uicontrol ('Style', 'RadioButton',...
    'Parent', letterOverlapGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.4 0.8 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Standard',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOverlapGroup'});

letterOverlapInterlockingButton = uicontrol ('Style', 'RadioButton',...
    'Parent', letterOverlapGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.2 0.8 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Interlocking',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOverlapGroup'});

letterOverlapIntertwinedButton = uicontrol ('Style', 'RadioButton',...
    'Parent', letterOverlapGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Intertwined',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOverlapGroup'});

letterOverlapNoneCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOverlapGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.8 0.2 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'I1');

letterOverlapMinimalCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOverlapGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.6 0.2 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'I2');

letterOverlapStandardCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOverlapGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.4 0.2 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'I3');

letterOverlapInterlockingCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOverlapGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.2 0.2 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'I4');

letterOverlapIntertwinedCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOverlapGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'I5');


% -----------------------Use of arrows
categoryGottliebUseOfArrowsText = uicontrol ('Style', 'Text',...
    'Parent', categoryFrame,...
    'String', 'Use of arrows',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.335 0.085 0.125 0.06],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

useOfArrowsDPOGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.335 0.05 0.125 0.038],...
    'BorderType', 'None');

useOfArrowsDefiningToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', useOfArrowsDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.1 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Defining',...
    'Value', 1,...
    'Callback', {@SetDefiningPredominantOther, 'useOfArrowsDefining'});

useOfArrowsPredominantToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', useOfArrowsDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.4 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Predom',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'useOfArrowsPredominant'});

useOfArrowsOtherToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', useOfArrowsDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.7 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Other',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'useOfArrowsOther'});

useOfArrowsGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.465 0.05 0.195 0.1],...
    'Visible', 'On',...
    'BorderType', 'None');

useOfArrowsIntegralButton = uicontrol ('Style', 'RadioButton',...
    'Parent', useOfArrowsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Integral',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'useOfArrowsGroup'});

useOfArrowsNonIntegralButton = uicontrol ('Style', 'RadioButton',...
    'Parent', useOfArrowsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Non integral',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'useOfArrowsGroup'});

useOfArrowsIntegralCodeText = uicontrol ('Style', 'Text',...
    'Parent', useOfArrowsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'J1');

useOfArrowsNonIntegralCodeText = uicontrol ('Style', 'Text',...
    'Parent', useOfArrowsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'J2');


% -----------------------Letter Shape Consistency
categoryGottliebLetterShapeConsistencyText = uicontrol ('Style', 'Text',...
    'Parent', categoryFrame,...
    'String', 'Letter Shape Cons.',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.665 0.925 0.125 0.06],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

letterShapeConsistencyDPOGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.665 0.89 0.125 0.038],...
    'BorderType', 'None');

letterShapeConsistencyDefiningToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', letterShapeConsistencyDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.1 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Defining',...
    'Value', 1,...
    'Callback', {@SetDefiningPredominantOther, 'letterShapeConsistencyDefining'});

letterShapeConsistencyPredominantToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', letterShapeConsistencyDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.4 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Predom',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'letterShapeConsistencyPredominant'});

letterShapeConsistencyOtherToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', letterShapeConsistencyDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.7 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Other',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'letterShapeConsistencyOther'});

letterShapeConsistencyGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.795 0.89 0.195 0.1],...
    'Visible', 'On',...
    'BorderType', 'None');

letterShapeConsistencyConsistentButton = uicontrol ('Style', 'RadioButton',...
    'Parent', letterShapeConsistencyGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Consistent',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterShapeConsistencyGroup'});

letterShapeConsistencyInconsistentButton = uicontrol ('Style', 'RadioButton',...
    'Parent', letterShapeConsistencyGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Inconsistent',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterShapeConsistencyGroup'});

letterShapeConsistencyConsistentCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterShapeConsistencyGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'K1');

letterShapeConsistencyInconsistentCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterShapeConsistencyGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'K2');


% -----------------------Fill effects
categoryGottliebFillEffectsText = uicontrol ('Style', 'Text',...
    'Parent', categoryFrame,...
    'String', 'Fill effects',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.665 0.78 0.125 0.06],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

fillEffectsDPOGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.665 0.745 0.125 0.038],...
    'BorderType', 'None');

fillEffectsDefiningToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', fillEffectsDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.1 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Defining',...
    'Value', 1,...
    'Callback', {@SetDefiningPredominantOther, 'fillEffectsDefining'});

fillEffectsPredominantToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', fillEffectsDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.4 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Predom',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'fillEffectsPredominant'});

fillEffectsOtherToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', fillEffectsDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.7 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Other',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'fillEffectsOther'});

fillEffectsGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.795 0.54 0.195 0.3],...
    'Visible', 'On',...
    'BorderType', 'None');

fillEffectsDirectionalHighlightsButton = uicontrol ('Style', 'RadioButton',...
    'Parent', fillEffectsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.833 0.8 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Directional highlights',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback',  {@SetUserDataOfThisControl, 'fillEffectsGroup'});

fillEffectsFadesButton = uicontrol ('Style', 'RadioButton',...
    'Parent', fillEffectsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.666 0.8 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Fades',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'fillEffectsGroup'});

fillEffectsFillShapeButton = uicontrol ('Style', 'RadioButton',...
    'Parent', fillEffectsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Fill shape',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'fillEffectsGroup'});

fillEffectsScrubFillsButton = uicontrol ('Style', 'RadioButton',...
    'Parent', fillEffectsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.333 0.8 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Scrub fills',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'fillEffectsGroup'});

fillEffectsShinesButton = uicontrol ('Style', 'RadioButton',...
    'Parent', fillEffectsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.166 0.8 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Shines',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'fillEffectsGroup'});

fillEffectsNoneButton = uicontrol ('Style', 'RadioButton',...
    'Parent', fillEffectsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'None',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'fillEffectsGroup'});

fillEffectsDirectionalHighlightsCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillEffectsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.833 0.2 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'L1');

fillEffectsFadesCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillEffectsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.666 0.2 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'L2');

fillEffectsFillShapeCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillEffectsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'L3');

fillEffectsScrubFillsCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillEffectsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.333 0.2 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'L4');

fillEffectsShinesCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillEffectsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.166 0.2 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'L5');

fillEffectsNoneCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillEffectsGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'L6');


% -----------------------Fill consistency
categoryGottliebFillConsistencyText = uicontrol ('Style', 'Text',...
    'Parent', categoryFrame,...
    'String', 'Fill consistency',...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized',...
    'Position', [0.665 0.43 0.125 0.06],...
    'HorizontalAlignment', 'Right',...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont);

fillConsistencyDPOGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.665 0.395 0.125 0.038],...
    'BorderType', 'None');

fillConsistencyDefiningToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', fillConsistencyDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.1 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Defining',...
    'Value', 1,...
    'Callback', {@SetDefiningPredominantOther, 'fillConsistencyDefining'});

fillConsistencyPredominantToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', fillConsistencyDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.4 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Predom',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'fillConsistencyPredominant'});

fillConsistencyOtherToggleButton = uicontrol ('Style', 'ToggleButton',...
    'Parent', fillConsistencyDPOGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.7 0 0.3 1],...
    'FontUnits', 'Normalized',...
    'FontSize', normalFont,...
    'String', 'Other',...
    'Value', 0,...
    'Callback', {@SetDefiningPredominantOther, 'fillConsistencyOther'});

fillConsistencyGroup = uibuttongroup('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.795 0.39 0.195 0.1],...
    'Visible', 'On',...
    'BorderType', 'None');

fillConsistencyConsistentButton = uicontrol ('Style', 'RadioButton',...
    'Parent', fillConsistencyGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Consistent',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'fillConsistencyGroup'});

fillConsistencyInconsistentButton = uicontrol ('Style', 'RadioButton',...
    'Parent', fillConsistencyGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Inconsistent',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'fillConsistencyGroup'});

fillConsistencyConsistentCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillConsistencyGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'M1');

fillConsistencyInconsistentCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillConsistencyGroup,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'M2');


%% Categories - All check boxes
% -----------------------Legibility
legibilityPanel = uipanel('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.135 0.835 0.195 0.15],...
    'Visible', 'Off',...
    'BorderType', 'None');

legibilityIllegibleCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', legibilityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.666 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Illegible',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'legibilityPanel'});

legibilityPartiallyLegibleCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', legibilityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.333 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Partially legible',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'legibilityPanel'});

legibilityLegibleCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', legibilityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Legible',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'legibilityPanel'});

legibilityIllegibleCodeText = uicontrol ('Style', 'Text',...
    'Parent', legibilityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.666 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'A1');

legibilityPartiallyLegibleCodeText = uicontrol ('Style', 'Text',...
    'Parent', legibilityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.333 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'A2');

legibilityLegibleCodeText = uicontrol ('Style', 'Text',...
    'Parent', legibilityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'A3');

% -----------------------Number of colours
numberOfColoursPanel = uipanel('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.135 0.64 0.195 0.15],...
    'Visible', 'Off',...
    'BorderType', 'None');

numberOfColoursTwoColoursCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', numberOfColoursPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.666 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', '2 colours',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'numberOfColoursPanel'});

numberOfColoursAtLeastThreeColoursCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', numberOfColoursPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.333 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'At least 3 colours',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'numberOfColoursPanel'});

numberOfColoursAtLeastFiveColoursCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', numberOfColoursPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'At least 5 colours',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'numberOfColoursPanel'});

numberOfColoursTwoColoursCodeText = uicontrol ('Style', 'Text',...
    'Parent', numberOfColoursPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.666 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'B1');

numberOfColoursAtLeastThreeColoursCodeText = uicontrol ('Style', 'Text',...
    'Parent', numberOfColoursPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.333 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'B2');

numberOfColoursAtLeastFiveColoursCodeText = uicontrol ('Style', 'Text',...
    'Parent', numberOfColoursPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'B3');

% -----------------------Symmetry
symmetryPanel = uipanel('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.135 0.49 0.195 0.1],...
    'Visible', 'Off',...
    'BorderType', 'None');

symmetrySymmetricalCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', symmetryPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Symmetry',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'symmetryPanel'});

symmetryAssymetricalCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', symmetryPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Assymetrical',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'symmetryPanel'});

symmetrySymmetricalCodeText = uicontrol ('Style', 'Text',...
    'Parent', symmetryPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'C1');

symmetryAssymetricalCodeText = uicontrol ('Style', 'Text',...
    'Parent', symmetryPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'C2');


% -----------------------Dimensionality
dimensionalityPanel = uipanel('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.135 0.24 0.195 0.2],...
    'Visible', 'Off',...
    'BorderType', 'None');

dimensionality2DimensionalCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', dimensionalityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.75 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', '2-dimensional',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'dimensionalityPanel'});

dimensionality2DimensionalWith3DEffectsCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', dimensionalityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', '2-dimens. with 3D effects',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'dimensionalityPanel'});

dimensionalityReliefEffectCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', dimensionalityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.25 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Relief effect',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'dimensionalityPanel'});

dimensionality3DimensionalCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', dimensionalityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', '3-dimensional',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'dimensionalityPanel'});

dimensionality2DimensionalCodeText = uicontrol ('Style', 'Text',...
    'Parent', dimensionalityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.75 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'D1');

dimensionality2DimensionalWith3DEffectsCodeText = uicontrol ('Style', 'Text',...
    'Parent', dimensionalityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'D2');

dimensionalityReliefEffectCodeText = uicontrol ('Style', 'Text',...
    'Parent', dimensionalityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.25 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'D3');

dimensionality3DimensionalCodeText = uicontrol ('Style', 'Text',...
    'Parent', dimensionalityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'D4');


% -----------------------Letter outlines
letterOutlinesPanel = uipanel('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.135 0 0.195 0.2],...
    'Visible', 'Off',...
    'BorderType', 'None');

letterOutlinesHardOnlyCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', letterOutlinesPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.75 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Hard only',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOutlinesPanel'});

letterOutlinesImpliedCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', letterOutlinesPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Implied',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOutlinesPanel'});

letterOutlinesInterruptedCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', letterOutlinesPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.25 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Interupted',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOutlinesPanel'});

letterOutlinesNonedCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', letterOutlinesPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'None',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOutlinesPanel'});

letterOutlinesHardOnlyCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOutlinesPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.75 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'E1');

letterOutlinesImpliedCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOutlinesPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'E2');

letterOutlinesInterruptedCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOutlinesPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.25 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'E3');

letterOutlinesNoneCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOutlinesPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.25],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'E4');


% -----------------------Linearity
linearityPanel = uipanel('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.465 0.835 0.195 0.15],...
    'Visible', 'Off',...
    'BorderType', 'None');

linearityCurvedOnlyCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', linearityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.666 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Curved only',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'linearityPanel'});

linearityStraightOnlyCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', linearityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.333 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Straight only',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'linearityPanel'});

linearityCurvedAndStraightCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', linearityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Curved and straight',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'linearityPanel'});

linearityCurvedOnlyCodeText = uicontrol ('Style', 'Text',...
    'Parent', linearityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.666 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'F1');

linearityStraightOnlyCodeText = uicontrol ('Style', 'Text',...
    'Parent', linearityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.333 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'F2');

linearityCurvedAndStraightCodeText = uicontrol ('Style', 'Text',...
    'Parent', linearityPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'F3');


% -----------------------Letter strokes
letterStrokesPanel = uipanel('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.465 0.69 0.195 0.1],...
    'Visible', 'Off',...
    'BorderType', 'None');

letterStrokesUniformCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', letterStrokesPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Uniform',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterStrokesPanel'});

letterStrokesVariedCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', letterStrokesPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Varied',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterStrokesPanel'});

letterStrokesUniformCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterStrokesPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'G1');

letterStrokesVariedCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterStrokesPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'G2');


% -----------------------Negative space
negativeSpacePanel = uipanel('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.465 0.49 0.195 0.15],...
    'Visible', 'Off',...
    'BorderType', 'None');

negativeSpaceExaggeratedCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', negativeSpacePanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.66 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Exaggerated',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'negativeSpacePanel'});

negativeSpaceStandardCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', negativeSpacePanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.33 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Standard',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'negativeSpacePanel'});

negativeSpaceLimitedCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', negativeSpacePanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Limited',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'negativeSpacePanel'});

negativeSpaceExaggeratedCodeText = uicontrol ('Style', 'Text',...
    'Parent', negativeSpacePanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.66 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'H1');

negativeSpaceStandardCodeText = uicontrol ('Style', 'Text',...
    'Parent', negativeSpacePanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.33 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'H2');

negativeSpaceLimitedCodeText = uicontrol ('Style', 'Text',...
    'Parent', negativeSpacePanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.33],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'H3');


% -----------------------Letter overlap
letterOverlapPanel = uipanel('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.465 0.19 0.195 0.25],...
    'Visible', 'Off',...
    'BorderType', 'None');

letterOverlapNoneCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', letterOverlapPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.8 0.8 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'None',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOverlapPanel'});

letterOverlapMinimalCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', letterOverlapPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.6 0.8 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Minimal',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOverlapPanel'});

letterOverlapStandardCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', letterOverlapPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.4 0.8 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Standard',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOverlapPanel'});

letterOverlapInterlockingCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', letterOverlapPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.2 0.8 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Interlocking',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOverlapPanel'});

letterOverlapIntertwinedCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', letterOverlapPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Intertwined',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterOverlapPanel'});

letterOverlapNoneCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOverlapPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.8 0.2 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'I1');

letterOverlapMinimalCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOverlapPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.6 0.2 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'I2');

letterOverlapStandardCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOverlapPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.4 0.2 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'I3');

letterOverlapInterlockingCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOverlapPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.2 0.2 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'I4');

letterOverlapIntertwinedCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterOverlapPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.2],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'I5');


% -----------------------Use of arrows
useOfArrowsPanel = uipanel('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.465 0.05 0.195 0.1],...
    'Visible', 'Off',...
    'BorderType', 'None');

useOfArrowsIntegralCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', useOfArrowsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Integral',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'useOfArrowsPanel'});

useOfArrowsNonIntegralCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', useOfArrowsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Non integral',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'useOfArrowsPanel'});

useOfArrowsIntegralCodeText = uicontrol ('Style', 'Text',...
    'Parent', useOfArrowsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'J1');

useOfArrowsNonIntegralCodeText = uicontrol ('Style', 'Text',...
    'Parent', useOfArrowsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'J2');



% -----------------------Letter Shape Consistency
letterShapeConsistencyPanel = uipanel('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.795 0.89 0.195 0.1],...
    'Visible', 'Off',...
    'BorderType', 'None');

letterShapeConsistencyConsistentCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', letterShapeConsistencyPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Consistent',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback',{@SetUserDataOfThisControl, 'letterShapeConsistencyPanel'});

letterShapeConsistencyInconsistentCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', letterShapeConsistencyPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Inconsistent',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'letterShapeConsistencyPanel'});

letterShapeConsistencyConsistentCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterShapeConsistencyPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'K1');

letterShapeConsistencyInconsistentCodeText = uicontrol ('Style', 'Text',...
    'Parent', letterShapeConsistencyPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'K2');


% -----------------------Fill effects
fillEffectsPanel = uipanel('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.795 0.54 0.195 0.3],...
    'Visible', 'Off',...
    'BorderType', 'None');

fillEffectsDirectionalHighlightsCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', fillEffectsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.833 0.8 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Directional highlights',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'fillEffectsPanel'});

fillEffectsFadesCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', fillEffectsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.666 0.8 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Fades',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'fillEffectsPanel'});

fillEffectsFillShapeCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', fillEffectsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Fill shape',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'fillEffectsPanel'});

fillEffectsScrubFillsCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', fillEffectsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.333 0.8 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Scrub fills',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'fillEffectsPanel'});

fillEffectsShinesCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', fillEffectsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.166 0.8 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Shines',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'fillEffectsPanel'});

fillEffectsNoneCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', fillEffectsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'None',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'fillEffectsPanel'});

fillEffectsDirectionalHighlightsCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillEffectsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.833 0.2 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'L1');

fillEffectsFadesCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillEffectsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.666 0.2 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'L2');

fillEffectsFillShapeCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillEffectsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'L3');

fillEffectsScrubFillsCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillEffectsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.333 0.2 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'L4');

fillEffectsShinesCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillEffectsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.166 0.2 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'L5');

fillEffectsNoneCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillEffectsPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.166],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'L6');


% -----------------------Fill consistency
fillConsistencyPanel = uipanel('Parent', categoryFrame,...
    'Units', 'Normalized',...
    'BackgroundColor', backgroundColourLight,...
    'Position', [0.795 0.39 0.195 0.1],...
    'Visible', 'Off',...
    'BorderType', 'None');

fillConsistencyConsistentCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', fillConsistencyPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0.5 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Consistent',...
    'Value', 0,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'fillConsistencyPanel'});

fillConsistencyInconsistentCheckBox = uicontrol ('Style', 'CheckBox',...
    'Parent', fillConsistencyPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0 0 0.8 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'Inconsistent',...
    'Value', 1,...
    'Enable', 'On',...
    'Callback', {@SetUserDataOfThisControl, 'fillConsistencyPanel'});

fillConsistencyConsistentCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillConsistencyPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0.5 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'M1');

fillConsistencyInconsistentCodeText = uicontrol ('Style', 'Text',...
    'Parent', fillConsistencyPanel,...
    'BackgroundColor', backgroundColourLight,...
    'Units', 'Normalized', ...
    'Position', [0.8 0 0.2 0.475],...
    'FontUnits', 'Normalized',...
    'FontSize', 0.55,...
    'String', 'M2');


SetProperties (styleNameGottlieb)
% GetAllDefiningPredominantOther
SetAllUserData
GetStyleString
GetPredominantCharacteristicsString
GetOtherCharacteristicsString


%% Functions
    function DisplayGotttliebStyleNotation (varargin)
        styleGottliebID = styleNamesGottliebDropdown.Value;
        styleNameGottlieb = styleNamesGottlieb{styleGottliebID};
        styleNotationsGottliebDropdown.Value = styleGottliebID;
        styleDescriptionGottliebText.String = ...
            styleDescriptionGottlieb(styleGottliebID);
        styleRemarkGottliebText.String = ...
            styleRemarkGottlieb(styleGottliebID);
        SetProperties (styleNameGottlieb)
        SetAllUserData
        GetStyleString
        GetPredominantCharacteristicsString
        GetOtherCharacteristicsString
    end

    function DisplayGotttliebStyleName (varargin)
        styleGottliebID = styleNotationsGottliebDropdown.Value;
        styleNameGottlieb = styleNamesGottlieb{styleGottliebID};
        styleNamesGottliebDropdown.Value = styleGottliebID;
        styleDescriptionGottliebText.String = ...
            styleDescriptionGottlieb(styleGottliebID);
        styleRemarkGottliebText.String = ...
            styleRemarkGottlieb(styleGottliebID);
        SetProperties (styleNameGottlieb)
        SetAllUserData
        GetStyleString
        GetPredominantCharacteristicsString
        GetOtherCharacteristicsString
    end

    function SetDefiningPredominantOther (varargin)
        if strcmp(varargin{3}, 'legibilityDefining')
            legibilityGroup.Visible = 'On'; % All radio buttons visible.
            legibilityPanel.Visible = 'Off'; % All checkboxes invisible.
        end
        if strcmp(varargin{3}, 'legibilityPredominant') || ...
                strcmp(varargin{3}, 'legibilityOther')
            legibilityGroup.Visible = 'Off'; % All radio buttons invisible.
            legibilityPanel.Visible = 'On'; % All checkboxes visible.
        end

        if strcmp(varargin{3}, 'numberOfColoursDefining')
            numberOfColoursGroup.Visible = 'On'; % All radio buttons visible.
            numberOfColoursPanel.Visible = 'Off'; % All checkboxes invisible.
        end
        if strcmp(varargin{3}, 'numberOfColoursPredominant') || ...
                strcmp(varargin{3}, 'numberOfColoursOther')
            numberOfColoursGroup.Visible = 'Off'; % All radio buttons invisible.
            numberOfColoursPanel.Visible = 'On'; % All checkboxes visible.
        end

        if strcmp(varargin{3}, 'symmetryDefining')
            symmetryGroup.Visible = 'On'; % All radio buttons visible.
            symmetryPanel.Visible = 'Off'; % All checkboxes invisible.
        end
        if strcmp(varargin{3}, 'symmetryPredominant') || ...
                strcmp(varargin{3}, 'symmetryOther')
            symmetryGroup.Visible = 'Off'; % All radio buttons invisible.
            symmetryPanel.Visible = 'On'; % All checkboxes visible.
        end

        if strcmp(varargin{3}, 'dimensionalityDefining')
            dimensionalityGroup.Visible = 'On'; % All radio buttons visible.
            dimensionalityPanel.Visible = 'Off'; % All checkboxes invisible.
        end
        if strcmp(varargin{3}, 'dimensionalityPredominant') || ...
                strcmp(varargin{3}, 'dimensionalityOther')
            dimensionalityGroup.Visible = 'Off'; % All radio buttons invisible.
            dimensionalityPanel.Visible = 'On'; % All checkboxes visible.
        end

        if strcmp(varargin{3}, 'letterOutlinesDefining')
            letterOutlinesGroup.Visible = 'On'; % All radio buttons visible.
            letterOutlinesPanel.Visible = 'Off'; % All checkboxes invisible.
        end
        if strcmp(varargin{3}, 'letterOutlinesPredominant') || ...
                strcmp(varargin{3}, 'letterOutlinesOther')
            letterOutlinesGroup.Visible = 'Off'; % All radio buttons invisible.
            letterOutlinesPanel.Visible = 'On'; % All checkboxes visible.
        end

        if strcmp(varargin{3}, 'linearityDefining')
            linearityGroup.Visible = 'On'; % All radio buttons visible.
            linearityPanel.Visible = 'Off'; % All checkboxes invisible.
        end
        if strcmp(varargin{3}, 'linearityPredominant') || ...
                strcmp(varargin{3}, 'linearityOther')
            linearityGroup.Visible = 'Off'; % All radio buttons invisible.
            linearityPanel.Visible = 'On'; % All checkboxes visible.
        end

        if strcmp(varargin{3}, 'letterStrokesDefining')
            letterStrokesGroup.Visible = 'On'; % All radio buttons visible.
            letterStrokesPanel.Visible = 'Off'; % All checkboxes invisible.
        end
        if strcmp(varargin{3}, 'letterStrokesPredominant') || ...
                strcmp(varargin{3}, 'letterStrokesOther')
            letterStrokesGroup.Visible = 'Off'; % All radio buttons invisible.
            letterStrokesPanel.Visible = 'On'; % All checkboxes visible.
        end

        if strcmp(varargin{3}, 'negativeSpaceDefining')
            negativeSpaceGroup.Visible = 'On'; % All radio buttons visible.
            negativeSpacePanel.Visible = 'Off'; % All checkboxes invisible.
        end
        if strcmp(varargin{3}, 'negativeSpacePredominant') || ...
                strcmp(varargin{3}, 'negativeSpaceOther')
            negativeSpaceGroup.Visible = 'Off'; % All radio buttons invisible.
            negativeSpacePanel.Visible = 'On'; % All checkboxes visible.
        end

        if strcmp(varargin{3}, 'letterOverlapDefining')
            letterOverlapGroup.Visible = 'On'; % All radio buttons visible.
            letterOverlapPanel.Visible = 'Off'; % All checkboxes invisible.
        end
        if strcmp(varargin{3}, 'letterOverlapPredominant') || ...
                strcmp(varargin{3}, 'letterOverlapOther')
            letterOverlapGroup.Visible = 'Off'; % All radio buttons invisible.
            letterOverlapPanel.Visible = 'On'; % All checkboxes visible.
        end

        if strcmp(varargin{3}, 'useOfArrowsDefining')
            useOfArrowsGroup.Visible = 'On'; % All radio buttons visible.
            useOfArrowsPanel.Visible = 'Off'; % All checkboxes invisible.
        end
        if strcmp(varargin{3}, 'useOfArrowsPredominant') || ...
                strcmp(varargin{3}, 'useOfArrowsOther')
            useOfArrowsGroup.Visible = 'Off'; % All radio buttons invisible.
            useOfArrowsPanel.Visible = 'On'; % All checkboxes visible.
        end

        if strcmp(varargin{3}, 'letterShapeConsistencyDefining')
            letterShapeConsistencyGroup.Visible = 'On'; % All radio buttons visible.
            letterShapeConsistencyPanel.Visible = 'Off'; % All checkboxes invisible.
        end
        if strcmp(varargin{3}, 'letterShapeConsistencyPredominant') || ...
                strcmp(varargin{3}, 'letterShapeConsistencyOther')
            letterShapeConsistencyGroup.Visible = 'Off'; % All radio buttons invisible.
            letterShapeConsistencyPanel.Visible = 'On'; % All checkboxes visible.
        end

        if strcmp(varargin{3}, 'fillEffectsDefining')
            fillEffectsGroup.Visible = 'On'; % All radio buttons visible.
            fillEffectsPanel.Visible = 'Off'; % All checkboxes invisible.
        end
        if strcmp(varargin{3}, 'fillEffectsPredominant') || ...
                strcmp(varargin{3}, 'fillEffectsOther')
            fillEffectsGroup.Visible = 'Off'; % All radio buttons invisible.
            fillEffectsPanel.Visible = 'On'; % All checkboxes visible.
        end

        if strcmp(varargin{3}, 'fillConsistencyDefining')
            fillConsistencyGroup.Visible = 'On'; % All radio buttons invisible.
            fillConsistencyPanel.Visible = 'Off'; % All checkboxes visible.
        end
        if strcmp(varargin{3}, 'fillConsistencyPredominant') || ...
                strcmp(varargin{3}, 'fillConsistencyOther')
            fillConsistencyGroup.Visible = 'Off'; % All radio buttons invisible.
            fillConsistencyPanel.Visible = 'On'; % All checkboxes visible.
        end

        % Update the colours of the controls.
        categoryPlusDPOString = varargin{3};
        if contains(lower(categoryPlusDPOString), 'defining')
            indexToSplit = strfind(lower(categoryPlusDPOString), 'defining');
            SetBackGroundColour (categoryPlusDPOString(1 : indexToSplit - 1), 'defining')
        elseif contains(lower(categoryPlusDPOString), 'predominant')
            indexToSplit = strfind(lower(categoryPlusDPOString), 'predominant');
            SetBackGroundColour (categoryPlusDPOString(1 : indexToSplit - 1), 'predominant')
        elseif contains(lower(categoryPlusDPOString), 'other')
            indexToSplit = strfind(lower(categoryPlusDPOString), 'other');
            SetBackGroundColour (categoryPlusDPOString(1 : indexToSplit - 1), 'other')
        end

        % Update the User data.
        SetUserDataOfThisControl ([], [], {3})
    end

    function SetAllUserData (varargin)
        SetUserDataOfThisControl ([], [], 'legibilityGroup')
        SetUserDataOfThisControl ([], [], 'legibilityPanel')
        SetUserDataOfThisControl ([], [], 'numberOfColoursGroup')
        SetUserDataOfThisControl ([], [], 'numberOfColoursPanel')
        SetUserDataOfThisControl ([], [], 'symmetryGroup')
        SetUserDataOfThisControl ([], [], 'symmetryPanel')
        SetUserDataOfThisControl ([], [], 'dimensionalityGroup')
        SetUserDataOfThisControl ([], [], 'dimensionalityPanel')
        SetUserDataOfThisControl ([], [], 'letterOutlinesGroup')
        SetUserDataOfThisControl ([], [], 'letterOutlinesPanel')
        SetUserDataOfThisControl ([], [], 'linearityGroup')
        SetUserDataOfThisControl ([], [], 'linearityPanel')
        SetUserDataOfThisControl ([], [], 'letterStrokesGroup')
        SetUserDataOfThisControl ([], [], 'letterStrokesPanel')
        SetUserDataOfThisControl ([], [], 'negativeSpaceGroup')
        SetUserDataOfThisControl ([], [], 'negativeSpacePanel')
        SetUserDataOfThisControl ([], [], 'letterOverlapGroup')
        SetUserDataOfThisControl ([], [], 'letterOverlapPanel')
        SetUserDataOfThisControl ([], [], 'useOfArrowsGroup')
        SetUserDataOfThisControl ([], [], 'useOfArrowsPanel')
        SetUserDataOfThisControl ([], [], 'letterShapeConsistencyGroup')
        SetUserDataOfThisControl ([], [], 'letterShapeConsistencyPanel')
        SetUserDataOfThisControl ([], [], 'fillEffectsGroup')
        SetUserDataOfThisControl ([], [], 'fillEffectsPanel')
        SetUserDataOfThisControl ([], [], 'fillConsistencyGroup')
        SetUserDataOfThisControl ([], [], 'fillConsistencyPanel')
    end

    function SetUserDataOfThisControl (varargin)
        if strcmp(varargin{3}, 'legibilityGroup')
            if legibilityIllegibleButton.Value
                legibilityGroup.UserData = 'A1';
            end
            if legibilityPartiallyLegibleButton.Value
                legibilityGroup.UserData = 'A2';
            end
            if legibilityLegibleButton.Value
                legibilityGroup.UserData = 'A3';
            end
        end
        if strcmp(varargin{3}, 'legibilityPanel')
            userDataToStore = [];
            if legibilityIllegibleCheckBox.Value
                userDataToStore = 'A1';
            end
            if legibilityPartiallyLegibleCheckBox.Value
                userDataToStore = [userDataToStore, 'A2'];
            end
            if legibilityLegibleCheckBox.Value
                userDataToStore = [userDataToStore, 'A3'];
            end
            legibilityPanel.UserData = userDataToStore;
        end

        if strcmp(varargin{3}, 'numberOfColoursGroup')
            if numberOfColoursTwoColoursButton.Value
                numberOfColoursGroup.UserData = 'B1';
            end
            if numberOfColoursAtLeastThreeColoursButton.Value
                numberOfColoursGroup.UserData = 'B2';
            end
            if numberOfColoursAtLeastFiveColoursButton.Value
                numberOfColoursGroup.UserData = 'B3';
            end
        end
        if strcmp(varargin{3}, 'numberOfColoursPanel')
            userDataToStore = [];
            if numberOfColoursTwoColoursCheckBox.Value
                userDataToStore = 'B1';
            end
            if numberOfColoursAtLeastThreeColoursCheckBox.Value
                userDataToStore = [userDataToStore, 'B2'];
            end
            if numberOfColoursAtLeastFiveColoursCheckBox.Value
                userDataToStore = [userDataToStore, 'B3'];
            end
            numberOfColoursPanel.UserData = userDataToStore;
        end

        if strcmp(varargin{3}, 'symmetryGroup')
            if symmetrySymmetricalButton.Value
                symmetryGroup.UserData = 'C1';
            end
            if symmetryAssymetricalButton.Value
                symmetryGroup.UserData = 'C2';
            end
        end
        if strcmp(varargin{3}, 'symmetryPanel')
            userDataToStore = [];
            if symmetrySymmetricalCheckBox.Value
                userDataToStore = 'C1';
            end
            if symmetryAssymetricalCheckBox.Value
                userDataToStore = [userDataToStore, 'C2'];
            end
            symmetryPanel.UserData = userDataToStore;
        end

        if strcmp(varargin{3}, 'dimensionalityGroup')
            if dimensionality2DimensionalButton.Value
                dimensionalityGroup.UserData = 'D1';
            end
            if dimensionality2DimensionalWith3DEffectsButton.Value
                dimensionalityGroup.UserData = 'D2';
            end
            if dimensionalityReliefEffectButton.Value
                dimensionalityGroup.UserData = 'D3';
            end
            if dimensionality3DimensionalButton.Value
                dimensionalityGroup.UserData = 'D4';
            end
        end
        if strcmp(varargin{3}, 'dimensionalityPanel')
            userDataToStore = [];
            if dimensionality2DimensionalCheckBox.Value
                userDataToStore = 'D1';
            end
            if dimensionality2DimensionalWith3DEffectsCheckBox.Value
                userDataToStore = [userDataToStore, 'D2'];
            end
            if dimensionalityReliefEffectCheckBox.Value
                userDataToStore = [userDataToStore, 'D3'];
            end
            if dimensionality3DimensionalCheckBox.Value
                userDataToStore = [userDataToStore, 'D4'];
            end
            dimensionalityPanel.UserData = userDataToStore;
        end

        if strcmp(varargin{3}, 'letterOutlinesGroup')
            if letterOutlinesHardOnlyButton.Value
                letterOutlinesGroup.UserData = 'E1';
            end
            if letterOutlinesImpliedButton.Value
                letterOutlinesGroup.UserData = 'E2';
            end
            if letterOutlinesInterruptedButton.Value
                letterOutlinesGroup.UserData = 'E3';
            end
            if letterOutlinesNonedButton.Value
                letterOutlinesGroup.UserData = 'E4';
            end
        end
        if strcmp(varargin{3}, 'letterOutlinesPanel')
            userDataToStore = [];
            if letterOutlinesHardOnlyCheckBox.Value
                userDataToStore = 'E1';
            end
            if letterOutlinesImpliedCheckBox.Value
                userDataToStore = [userDataToStore, 'E2'];
            end
            if letterOutlinesInterruptedCheckBox.Value
                userDataToStore = [userDataToStore, 'E3'];
            end
            if letterOutlinesNonedCheckBox.Value
                userDataToStore = [userDataToStore, 'E4'];
            end
            letterOutlinesPanel.UserData = userDataToStore;
        end

        if strcmp(varargin{3}, 'linearityGroup')
            if linearityCurvedOnlyButton.Value
                linearityGroup.UserData = 'F1';
            end
            if linearityStraightOnlyButton.Value
                linearityGroup.UserData = 'F2';
            end
            if linearityCurvedAndStraightButton.Value
                linearityGroup.UserData = 'F3';
            end
        end
        if strcmp(varargin{3}, 'linearityPanel')
            userDataToStore = [];
            if linearityCurvedOnlyCheckBox.Value
                userDataToStore = 'F1';
            end
            if linearityStraightOnlyCheckBox.Value
                userDataToStore = [userDataToStore, 'F2'];
            end
            if linearityCurvedAndStraightCheckBox.Value
                userDataToStore = [userDataToStore, 'F3'];
            end
            linearityPanel.UserData = userDataToStore;
        end

        if strcmp(varargin{3}, 'letterStrokesGroup')
            if letterStrokesUniformButton.Value
                letterStrokesGroup.UserData = 'G1';
            end
            if letterStrokesVariedButton.Value
                letterStrokesGroup.UserData = 'G2';
            end
        end
        if strcmp(varargin{3}, 'letterStrokesPanel')
            userDataToStore = [];
            if letterStrokesUniformCheckBox.Value
                userDataToStore = 'G1';
            end
            if letterStrokesVariedCheckBox.Value
                userDataToStore = [userDataToStore, 'G2'];
            end
            letterStrokesPanel.UserData = userDataToStore;
        end

        if strcmp(varargin{3}, 'negativeSpaceGroup')
            if negativeSpaceExaggeratedButton.Value
                negativeSpaceGroup.UserData = 'H1';
            end
            if negativeSpaceStandardButton.Value
                negativeSpaceGroup.UserData = 'H2';
            end
            if negativeSpaceLimitedButton.Value
                negativeSpaceGroup.UserData = 'H3';
            end
        end
        if strcmp(varargin{3}, 'negativeSpacePanel')
            userDataToStore = [];
            if negativeSpaceExaggeratedCheckBox.Value
                userDataToStore = 'H1';
            end
            if negativeSpaceStandardCheckBox.Value
                userDataToStore = [userDataToStore, 'H2'];
            end
            if negativeSpaceLimitedCheckBox.Value
                userDataToStore = [userDataToStore, 'H3'];
            end
            negativeSpacePanel.UserData = userDataToStore;
        end

        if strcmp(varargin{3}, 'letterOverlapGroup')
            if letterOverlapNoneButton.Value
                letterOverlapGroup.UserData = 'I1';
            end
            if letterOverlapMinimalButton.Value
                letterOverlapGroup.UserData = 'I2';
            end
            if letterOverlapStandardButton.Value
                letterOverlapGroup.UserData = 'I3';
            end
            if letterOverlapInterlockingButton.Value
                letterOverlapGroup.UserData = 'I4';
            end
            if  letterOverlapIntertwinedButton.Value
                letterOverlapGroup.UserData = 'I5';
            end
        end
        if strcmp(varargin{3}, 'letterOverlapPanel')
            userDataToStore = [];
            if letterOverlapNoneCheckBox.Value
                userDataToStore = 'I1';
            end
            if letterOverlapMinimalCheckBox.Value
                userDataToStore = [userDataToStore, 'I2'];
            end
            if letterOverlapStandardCheckBox.Value
                userDataToStore = [userDataToStore, 'I3'];
            end
            if  letterOverlapInterlockingCheckBox.Value
                userDataToStore = [userDataToStore, 'I4'];
            end
            if letterOverlapIntertwinedCheckBox.Value
                userDataToStore = [userDataToStore, 'I5'];
            end
            letterOverlapPanel.UserData = userDataToStore;
        end

        if strcmp(varargin{3}, 'useOfArrowsGroup')
            if useOfArrowsIntegralButton.Value
                useOfArrowsGroup.UserData = 'J1';
            end
            if useOfArrowsNonIntegralButton.Value
                useOfArrowsGroup.UserData = 'J2';
            end
        end
        if strcmp(varargin{3}, 'useOfArrowsPanel')
            userDataToStore = [];
            if useOfArrowsIntegralCheckBox.Value
                userDataToStore = 'J1';
            end
            if useOfArrowsNonIntegralCheckBox.Value
                userDataToStore = [userDataToStore, 'J2'];
            end
            useOfArrowsPanel.UserData = userDataToStore;
        end

        if strcmp(varargin{3}, 'letterShapeConsistencyGroup')
            if letterShapeConsistencyConsistentButton.Value
                letterShapeConsistencyGroup.UserData = 'K1';
            end
            if letterShapeConsistencyInconsistentButton.Value
                letterShapeConsistencyGroup.UserData = 'K2';
            end
        end
        if strcmp(varargin{3}, 'letterShapeConsistencyPanel')
            userDataToStore = [];
            if letterShapeConsistencyConsistentCheckBox.Value
                userDataToStore = 'K1';
            end
            if  letterShapeConsistencyInconsistentCheckBox.Value
                userDataToStore = [userDataToStore, 'K2'];
            end
            letterShapeConsistencyPanel.UserData = userDataToStore;
        end

        if strcmp(varargin{3}, 'fillEffectsGroup')
            if fillEffectsDirectionalHighlightsButton.Value
                fillEffectsGroup.UserData = 'L1';
            end
            if fillEffectsFadesButton.Value
                fillEffectsGroup.UserData = 'L2';
            end
            if fillEffectsFillShapeButton.Value
                fillEffectsGroup.UserData = 'L3';
            end
            if fillEffectsScrubFillsButton.Value
                fillEffectsGroup.UserData = 'L4';
            end
            if fillEffectsShinesButton.Value
                fillEffectsGroup.UserData = 'L5';
            end
            if fillEffectsNoneButton.Value
                fillEffectsGroup.UserData = 'L6';
            end
        end
        if strcmp(varargin{3}, 'fillEffectsPanel')
            userDataToStore = [];
            if fillEffectsDirectionalHighlightsCheckBox.Value
                userDataToStore = 'L1';
            end
            if fillEffectsFadesCheckBox.Value
                userDataToStore = [userDataToStore, 'L2'];
            end
            if fillEffectsFillShapeCheckBox.Value
                userDataToStore = [userDataToStore, 'L3'];
            end
            if fillEffectsScrubFillsCheckBox.Value
                userDataToStore = [userDataToStore, 'L4'];
            end
            if fillEffectsShinesCheckBox.Value
                userDataToStore = [userDataToStore, 'L5'];
            end
            if fillEffectsNoneCheckBox.Value
                userDataToStore = [userDataToStore, 'L6'];
            end
            fillEffectsPanel.UserData = userDataToStore;
        end

        if strcmp(varargin{3}, 'fillConsistencyGroup')
            if fillConsistencyConsistentButton.Value
                fillConsistencyGroup.UserData = 'M1';
            end
            if fillConsistencyInconsistentButton.Value
                fillConsistencyGroup.UserData = 'M2';
            end
        end
        if strcmp(varargin{3}, 'fillConsistencyPanel')
            userDataToStore = [];
            if fillConsistencyConsistentCheckBox.Value
                userDataToStore = 'M1';
            end
            if fillConsistencyInconsistentCheckBox.Value
                userDataToStore = [userDataToStore, 'M2'];
            end
            fillConsistencyPanel.UserData = userDataToStore;
        end

        GetStyleString
        GetPredominantCharacteristicsString
        GetOtherCharacteristicsString
    end

    function SetVisibilityRadioButtons (categories, visibilityOnOff)
        for ii = 1:length(categories)
            category = categories{ii};

            switch category
                case 'legibility'
                    legibilityGroup.Visible = visibilityOnOff;
                case 'numberOfColours'
                    numberOfColoursGroup.Visible = visibilityOnOff;
                case 'symmetry'
                    symmetryGroup.Visible = visibilityOnOff;
                case 'dimensionality'
                    dimensionalityGroup.Visible = visibilityOnOff;
                case 'letterOutlines'
                    letterOutlinesGroup.Visible = visibilityOnOff;
                case 'linearity'
                    linearityGroup.Visible = visibilityOnOff;
                case 'letterStrokes'
                    letterStrokesGroup.Visible = visibilityOnOff;
                case 'negativeSpace'
                    negativeSpaceGroup.Visible = visibilityOnOff;
                case 'letterOverlap'
                    letterOverlapGroup.Visible = visibilityOnOff;
                case 'useOfArrows'
                    useOfArrowsGroup.Visible = visibilityOnOff;
                case 'letterShapeConsistency'
                    letterShapeConsistencyGroup.Visible = visibilityOnOff;
                case 'fillEffects'
                    fillEffectsGroup.Visible = visibilityOnOff;
                case 'fillConsistency'
                    fillConsistencyGroup.Visible = visibilityOnOff;
            end
        end
    end

    function SetVisibilityCheckBoxes (categories, visibilityOnOff)
        for ii = 1:length(categories)
            category = categories{ii};

            switch category
                case 'legibility'
                    legibilityPanel.Visible = visibilityOnOff;
                case 'numberOfColours'
                    numberOfColoursPanel.Visible = visibilityOnOff;
                case 'symmetry'
                    symmetryPanel.Visible = visibilityOnOff;
                case 'dimensionality'
                    dimensionalityPanel.Visible = visibilityOnOff;
                case 'letterOutlines'
                    letterOutlinesPanel.Visible = visibilityOnOff;
                case 'linearity'
                    linearityPanel.Visible = visibilityOnOff;
                case 'letterStrokes'
                    letterStrokesPanel.Visible = visibilityOnOff;
                case 'negativeSpace'
                    negativeSpacePanel.Visible = visibilityOnOff;
                case 'letterOverlap'
                    letterOverlapPanel.Visible = visibilityOnOff;
                case 'useOfArrows'
                    useOfArrowsPanel.Visible = visibilityOnOff;
                case 'letterShapeConsistency'
                    letterShapeConsistencyPanel.Visible = visibilityOnOff;
                case 'fillEffects'
                    fillEffectsPanel.Visible = visibilityOnOff;
                case 'fillConsistency'
                    fillConsistencyPanel.Visible = visibilityOnOff;
            end
        end
    end

    function SetValueCheckBoxes (categories, checkBoxValue)
        for ii = 1:length(categories)
            category = categories{ii};

            switch category
                case 'legibility'
                    legibilityIllegibleCheckBox.Value = checkBoxValue;
                    legibilityPartiallyLegibleCheckBox.Value = checkBoxValue;
                    legibilityLegibleCheckBox.Value = checkBoxValue;
                case 'numberOfColours'
                    numberOfColoursTwoColoursCheckBox.Value = checkBoxValue;
                    numberOfColoursAtLeastThreeColoursCheckBox.Value = ...
                        checkBoxValue;
                    numberOfColoursAtLeastFiveColoursCheckBox.Value = ...
                        checkBoxValue;
                case 'symmetry'
                    symmetrySymmetricalCheckBox.Value = checkBoxValue;
                    symmetryAssymetricalCheckBox.Value = checkBoxValue;
                case 'dimensionality'
                    dimensionality2DimensionalCheckBox.Value = ...
                        checkBoxValue;
                    dimensionality2DimensionalWith3DEffectsCheckBox.Value = ...
                        checkBoxValue;
                    dimensionalityReliefEffectCheckBox.Value = ...
                        checkBoxValue;
                    dimensionality3DimensionalCheckBox.Value = ...
                        checkBoxValue;
                case 'letterOutlines'
                    letterOutlinesHardOnlyCheckBox.Value = checkBoxValue;
                    letterOutlinesImpliedCheckBox.Value = checkBoxValue;
                    letterOutlinesInterruptedCheckBox.Value = checkBoxValue;
                    letterOutlinesNonedCheckBox.Value = checkBoxValue;
                case 'linearity'
                    linearityCurvedOnlyCheckBox.Value = checkBoxValue;
                    linearityStraightOnlyCheckBox.Value = checkBoxValue;
                    linearityCurvedAndStraightCheckBox.Value = checkBoxValue;
                case 'letterStrokes'
                    letterStrokesUniformCheckBox.Value = checkBoxValue;
                    letterStrokesVariedCheckBox.Value = checkBoxValue;
                case 'negativeSpace'
                    negativeSpaceExaggeratedCheckBox.Value = checkBoxValue;
                    negativeSpaceStandardCheckBox.Value = checkBoxValue;
                    negativeSpaceLimitedCheckBox.Value = checkBoxValue;
                case 'letterOverlap'
                    letterOverlapNoneCheckBox.Value = checkBoxValue;
                    letterOverlapMinimalCheckBox.Value = checkBoxValue;
                    letterOverlapStandardCheckBox.Value = checkBoxValue;
                    letterOverlapInterlockingCheckBox.Value = checkBoxValue;
                    letterOverlapIntertwinedCheckBox.Value = checkBoxValue;
                case 'useOfArrows'
                    useOfArrowsIntegralCheckBox.Value = checkBoxValue;
                    useOfArrowsIntegralCodeText.Value = checkBoxValue;
                case 'letterShapeConsistency'
                    letterShapeConsistencyConsistentCheckBox.Value = ...
                        checkBoxValue;
                    letterShapeConsistencyInconsistentCheckBox.Value = ...
                        checkBoxValue;
                case 'fillEffects'
                    fillEffectsDirectionalHighlightsCheckBox.Value = ...
                        checkBoxValue;
                    fillEffectsFadesCheckBox.Value = checkBoxValue;
                    fillEffectsFillShapeCheckBox.Value = checkBoxValue;
                    fillEffectsScrubFillsCheckBox.Value = checkBoxValue;
                    fillEffectsShinesCheckBox.Value = checkBoxValue;
                    fillEffectsNoneCheckBox.Value = checkBoxValue;
                case 'fillConsistency'
                    fillConsistencyConsistentCheckBox.Value = checkBoxValue;
                    fillConsistencyInconsistentCheckBox.Value = ...
                        checkBoxValue;
            end
        end
    end

    function SetBackGroundColour (category, definingPredominantOther)
        switch category
            case 'legibility'
                switch definingPredominantOther
                    case 'defining'
                        set(findall(legibilityGroup), 'backgroundColor', backGroundColourDefining)
                        set(findall(legibilityPanel), 'backgroundColor', backGroundColourDefining)
                        categoryGottliebLegibilityText.BackgroundColor = backGroundColourDefining;
                    case 'predominant'
                        set(findall(legibilityGroup), 'backgroundColor', backGroundColourPredominant)
                        set(findall(legibilityPanel), 'backgroundColor', backGroundColourPredominant)
                        categoryGottliebLegibilityText.BackgroundColor = backGroundColourPredominant;
                    case 'other'
                        set(findall(legibilityGroup), 'backgroundColor', backGroundColourOther)
                        set(findall(legibilityPanel), 'backgroundColor', backGroundColourOther)
                        categoryGottliebLegibilityText.BackgroundColor = backGroundColourOther;
                end
            case 'numberOfColours'
                switch definingPredominantOther
                    case 'defining'
                        set(findall(numberOfColoursGroup), 'backgroundColor', backGroundColourDefining)
                        set(findall(numberOfColoursPanel), 'backgroundColor', backGroundColourDefining)
                        categoryGottliebNumberOfColoursText.BackgroundColor = backGroundColourDefining;
                    case 'predominant'
                        set(findall(numberOfColoursGroup), 'backgroundColor', backGroundColourPredominant)
                        set(findall(numberOfColoursPanel), 'backgroundColor', backGroundColourPredominant)
                        categoryGottliebNumberOfColoursText.BackgroundColor = backGroundColourPredominant;
                    case 'other'
                        set(findall(numberOfColoursGroup), 'backgroundColor', backGroundColourOther)
                        set(findall(numberOfColoursPanel), 'backgroundColor', backGroundColourOther)
                        categoryGottliebNumberOfColoursText.BackgroundColor = backGroundColourOther;
                end
            case 'symmetry'
                switch definingPredominantOther
                    case 'defining'
                        set(findall(symmetryGroup), 'backgroundColor', backGroundColourDefining)
                        set(findall(symmetryPanel), 'backgroundColor', backGroundColourDefining)
                        categoryGottliebSymmetryText.BackgroundColor = backGroundColourDefining;
                    case 'predominant'
                        set(findall(symmetryGroup), 'backgroundColor', backGroundColourPredominant)
                        set(findall(symmetryPanel), 'backgroundColor', backGroundColourPredominant)
                        categoryGottliebSymmetryText.BackgroundColor = backGroundColourPredominant;
                    case 'other'
                        set(findall(symmetryGroup), 'backgroundColor', backGroundColourOther)
                        set(findall(symmetryPanel), 'backgroundColor', backGroundColourOther)
                        categoryGottliebSymmetryText.BackgroundColor = backGroundColourOther;
                end
            case 'dimensionality'
                switch definingPredominantOther
                    case 'defining'
                        set(findall(dimensionalityGroup), 'backgroundColor', backGroundColourDefining)
                        set(findall(dimensionalityPanel), 'backgroundColor', backGroundColourDefining)
                        categoryGottliebDimensionalityText.BackgroundColor = backGroundColourDefining;
                    case 'predominant'
                        set(findall(dimensionalityGroup), 'backgroundColor', backGroundColourPredominant)
                        set(findall(dimensionalityPanel), 'backgroundColor', backGroundColourPredominant)
                        categoryGottliebDimensionalityText.BackgroundColor = backGroundColourPredominant;
                    case 'other'
                        set(findall(dimensionalityGroup), 'backgroundColor', backGroundColourOther)
                        set(findall(dimensionalityPanel), 'backgroundColor', backGroundColourOther)
                        categoryGottliebDimensionalityText.BackgroundColor = backGroundColourOther;
                end
            case 'letterOutlines'
                switch definingPredominantOther
                    case 'defining'
                        set(findall(letterOutlinesGroup), 'backgroundColor', backGroundColourDefining)
                        set(findall(letterOutlinesPanel), 'backgroundColor', backGroundColourDefining)
                        categoryGottliebLetterOutlinesText.BackgroundColor = backGroundColourDefining;
                    case 'predominant'
                        set(findall(letterOutlinesGroup), 'backgroundColor', backGroundColourPredominant)
                        set(findall(letterOutlinesPanel), 'backgroundColor', backGroundColourPredominant)
                        categoryGottliebLetterOutlinesText.BackgroundColor = backGroundColourPredominant;
                    case 'other'
                        set(findall(letterOutlinesGroup), 'backgroundColor',backGroundColourOther)
                        set(findall(letterOutlinesPanel), 'backgroundColor', backGroundColourOther)
                        categoryGottliebLetterOutlinesText.BackgroundColor = backGroundColourOther;
                end
            case 'linearity'
                switch definingPredominantOther
                    case 'defining'
                        set(findall(linearityGroup), 'backgroundColor', backGroundColourDefining)
                        set(findall(linearityPanel), 'backgroundColor', backGroundColourDefining)
                        categoryGottliebLinearityText.BackgroundColor = backGroundColourDefining;
                    case 'predominant'
                        set(findall(linearityGroup), 'backgroundColor', backGroundColourDefining)
                        set(findall(linearityPanel), 'backgroundColor', backGroundColourPredominant)
                        categoryGottliebLinearityText.BackgroundColor = backGroundColourPredominant;
                    case 'other'
                        set(findall(linearityGroup), 'backgroundColor', backGroundColourOther)
                        set(findall(linearityPanel), 'backgroundColor', backGroundColourOther)
                        categoryGottliebLinearityText.BackgroundColor = backGroundColourOther;
                end
            case 'letterStrokes'
                switch definingPredominantOther
                    case 'defining'
                        set(findall(letterStrokesGroup), 'backgroundColor', backGroundColourDefining)
                        set(findall(letterStrokesPanel), 'backgroundColor', backGroundColourDefining)
                        categoryGottliebLetterStrokesText.BackgroundColor = backGroundColourDefining;
                    case 'predominant'
                        set(findall(letterStrokesGroup), 'backgroundColor', backGroundColourPredominant)
                        set(findall(letterStrokesPanel), 'backgroundColor', backGroundColourPredominant)
                        categoryGottliebLetterStrokesText.BackgroundColor = backGroundColourPredominant;
                    case 'other'
                        set(findall(letterStrokesGroup), 'backgroundColor', backGroundColourOther)
                        set(findall(letterStrokesPanel), 'backgroundColor', backGroundColourOther)
                        categoryGottliebLetterStrokesText.BackgroundColor = backGroundColourOther;
                end
            case 'negativeSpace'
                switch definingPredominantOther
                    case 'defining'
                        set(findall(negativeSpaceGroup), 'backgroundColor', backGroundColourDefining)
                        set(findall(negativeSpacePanel), 'backgroundColor', backGroundColourDefining)
                        categoryGottliebNegativeSpaceText.BackgroundColor = backGroundColourDefining;
                    case 'predominant'
                        set(findall(negativeSpaceGroup), 'backgroundColor', backGroundColourPredominant)
                        set(findall(negativeSpacePanel), 'backgroundColor', backGroundColourPredominant)
                        categoryGottliebNegativeSpaceText.BackgroundColor = backGroundColourPredominant;
                    case 'other'
                        set(findall(negativeSpaceGroup), 'backgroundColor', backGroundColourOther)
                        set(findall(negativeSpacePanel), 'backgroundColor', backGroundColourOther)
                        categoryGottliebNegativeSpaceText.BackgroundColor = backGroundColourOther;
                end
            case 'letterOverlap'
                switch definingPredominantOther
                    case 'defining'
                        set(findall(letterOverlapGroup), 'backgroundColor', backGroundColourDefining)
                        set(findall(letterOverlapPanel), 'backgroundColor', backGroundColourDefining)
                        categoryGottliebLetterOverlapText.BackgroundColor = backGroundColourDefining;
                    case 'predominant'
                        set(findall(letterOverlapGroup), 'backgroundColor', backGroundColourPredominant)
                        set(findall(letterOverlapPanel), 'backgroundColor', backGroundColourPredominant)
                        categoryGottliebLetterOverlapText.BackgroundColor = backGroundColourPredominant;
                    case 'other'
                        set(findall(letterOverlapGroup), 'backgroundColor', backGroundColourOther)
                        set(findall(letterOverlapPanel), 'backgroundColor', backGroundColourOther)
                        categoryGottliebLetterOverlapText.BackgroundColor = backGroundColourOther;
                end
            case 'useOfArrows'
                switch definingPredominantOther
                    case 'defining'
                        set(findall(useOfArrowsGroup), 'backgroundColor', backGroundColourDefining)
                        set(findall(useOfArrowsPanel), 'backgroundColor', backGroundColourDefining)
                        categoryGottliebUseOfArrowsText.BackgroundColor = backGroundColourDefining;
                    case 'predominant'
                        set(findall(useOfArrowsGroup), 'backgroundColor', backGroundColourPredominant)
                        set(findall(useOfArrowsPanel), 'backgroundColor', backGroundColourPredominant)
                        categoryGottliebUseOfArrowsText.BackgroundColor = backGroundColourPredominant;
                    case 'other'
                        set(findall(useOfArrowsGroup), 'backgroundColor', backGroundColourOther)
                        set(findall(useOfArrowsPanel), 'backgroundColor', backGroundColourOther)
                        categoryGottliebUseOfArrowsText.BackgroundColor = backGroundColourOther;
                end
            case 'letterShapeConsistency'
                switch definingPredominantOther
                    case 'defining'
                        set(findall(letterShapeConsistencyGroup), 'backgroundColor', backGroundColourDefining)
                        set(findall(letterShapeConsistencyPanel), 'backgroundColor', backGroundColourDefining)
                        categoryGottliebLetterShapeConsistencyText.BackgroundColor = backGroundColourDefining;
                    case 'predominant'
                        set(findall(letterShapeConsistencyGroup), 'backgroundColor', backGroundColourPredominant)
                        set(findall(letterShapeConsistencyPanel), 'backgroundColor', backGroundColourPredominant)
                        categoryGottliebLetterShapeConsistencyText.BackgroundColor = backGroundColourPredominant;
                    case 'other'
                        set(findall(letterShapeConsistencyGroup), 'backgroundColor', backGroundColourOther)
                        set(findall(letterShapeConsistencyPanel), 'backgroundColor', backGroundColourOther)
                        categoryGottliebLetterShapeConsistencyText.BackgroundColor = backGroundColourOther;
                end
            case 'fillEffects'
                switch definingPredominantOther
                    case 'defining'
                        set(findall(fillEffectsGroup), 'backgroundColor', backGroundColourDefining)
                        set(findall(fillEffectsPanel), 'backgroundColor', backGroundColourDefining)
                        categoryGottliebFillEffectsText.BackgroundColor = backGroundColourDefining;
                    case 'predominant'
                        set(findall(fillEffectsGroup), 'backgroundColor', backGroundColourPredominant)
                        set(findall(fillEffectsPanel), 'backgroundColor', backGroundColourPredominant)
                        categoryGottliebFillEffectsText.BackgroundColor = backGroundColourPredominant;
                    case 'other'
                        set(findall(fillEffectsGroup), 'backgroundColor', backGroundColourOther)
                        set(findall(fillEffectsPanel), 'backgroundColor', backGroundColourOther)
                        categoryGottliebFillEffectsText.BackgroundColor = backGroundColourOther;
                end
            case 'fillConsistency'
                switch definingPredominantOther
                    case 'defining'
                        set(findall(fillConsistencyGroup), 'backgroundColor', backGroundColourDefining)
                        set(findall(fillConsistencyPanel), 'backgroundColor', backGroundColourDefining)
                        categoryGottliebFillConsistencyText.BackgroundColor = backGroundColourDefining;
                    case 'predominant'
                        set(findall(fillConsistencyGroup), 'backgroundColor', backGroundColourPredominant)
                        set(findall(fillConsistencyPanel), 'backgroundColor', backGroundColourPredominant)
                        categoryGottliebFillConsistencyText.BackgroundColor = backGroundColourPredominant;
                    case 'other'
                        set(findall(fillConsistencyGroup), 'backgroundColor', backGroundColourOther)
                        set(findall(fillConsistencyPanel), 'backgroundColor', backGroundColourOther)
                        categoryGottliebFillConsistencyText.BackgroundColor = backGroundColourOther;
                end
        end
    end

    function SetBackGroundColourAndToggleButtonValue (categories, ...
            DefiningPredominantOther, toggleButtonValue)
        for ii = 1:length(categories)
            category = categories{ii};

            switch category
                case 'legibility'
                    switch DefiningPredominantOther
                        case 'defining'
                            legibilityDefiningToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('legibility', 'defining')
                        case 'predominant'
                            legibilityPredominantToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('legibility', 'predominant')
                        case 'other'
                            legibilityOtherToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('legibility', 'other')
                    end
                case 'numberOfColours'
                    switch DefiningPredominantOther
                        case 'defining'
                            numberOfColoursDefiningToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('numberOfColours', 'defining')
                        case 'predominant'
                            numberOfColoursPredominantToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('numberOfColours', 'predominant')
                        case 'other'
                            numberOfColoursOtherToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('numberOfColours', 'other')
                    end
                case 'symmetry'
                    switch DefiningPredominantOther
                        case 'defining'
                            symmetryDefiningToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('symmetry', 'defining')
                        case 'predominant'
                            symmetryPredominantToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('symmetry', 'predominant')
                        case 'other'
                            symmetryOtherToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('symmetry', 'other')
                    end
                case 'dimensionality'
                    switch DefiningPredominantOther
                        case 'defining'
                            dimensionalityDefiningToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('dimensionality', 'defining')
                        case 'predominant'
                            dimensionalityPredominantToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('dimensionality', 'predominant')
                        case 'other'
                            dimensionalityOtherToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('dimensionality', 'other')
                    end
                case 'letterOutlines'
                    switch DefiningPredominantOther
                        case 'defining'
                            letterOutlinesDefiningToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('letterOutlines', 'defining')
                        case 'predominant'
                            letterOutlinesPredominantToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('letterOutlines', 'predominant')
                        case 'other'
                            letterOutlinesOtherToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('letterOutlines', 'other')
                    end
                case 'linearity'
                    switch DefiningPredominantOther
                        case 'defining'
                            linearityDefiningToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('linearity', 'defining')
                        case 'predominant'
                            linearityPredominantToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('linearity', 'predominant')
                        case 'other'
                            linearityOtherToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('linearity', 'other')
                    end
                case 'letterStrokes'
                    switch DefiningPredominantOther
                        case 'defining'
                            letterStrokesDefiningToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('letterStrokes', 'defining')
                        case 'predominant'
                            letterStrokesPredominantToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('letterStrokes', 'predominant')
                        case 'other'
                            letterStrokesOtherToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('letterStrokes', 'other')
                    end
                case 'negativeSpace'
                    switch DefiningPredominantOther
                        case 'defining'
                            negativeSpaceDefiningToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('negativeSpace', 'defining')
                        case 'predominant'
                            negativeSpacePredominantToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('negativeSpace', 'predominant')
                        case 'other'
                            negativeSpaceOtherToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('negativeSpace', 'other')
                    end
                case 'letterOverlap'
                    switch DefiningPredominantOther
                        case 'defining'
                            letterOverlapDefiningToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('letterOverlap', 'defining')
                        case 'predominant'
                            letterOverlapPredominantToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('letterOverlap', 'predominant')
                        case 'other'
                            letterOverlapOtherToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('letterOverlap', 'other')
                    end
                case 'useOfArrows'
                    switch DefiningPredominantOther
                        case 'defining'
                            useOfArrowsDefiningToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('useOfArrows', 'defining')
                        case 'predominant'
                            useOfArrowsPredominantToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('useOfArrows', 'predominant')
                        case 'other'
                            useOfArrowsOtherToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('useOfArrows', 'other')
                    end
                case 'letterShapeConsistency'
                    switch DefiningPredominantOther
                        case 'defining'
                            letterShapeConsistencyDefiningToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('letterShapeConsistency', 'defining')
                        case 'predominant'
                            letterShapeConsistencyPredominantToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('letterShapeConsistency', 'predominant')
                        case 'other'
                            letterShapeConsistencyOtherToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('letterShapeConsistency', 'other')
                    end
                case 'fillEffects'
                    switch DefiningPredominantOther
                        case 'defining'
                            fillEffectsDefiningToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('fillEffects', 'defining')
                        case 'predominant'
                            fillEffectsPredominantToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('fillEffects', 'predominant')
                        case 'other'
                            fillEffectsOtherToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('fillEffects', 'other')
                    end
                case 'fillConsistency'
                    switch DefiningPredominantOther
                        case 'defining'
                            fillConsistencyDefiningToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('fillConsistency', 'defining')
                        case 'predominant'
                            fillConsistencyPredominantToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('fillConsistency', 'predominant')
                        case 'other'
                            fillConsistencyOtherToggleButton.Value = toggleButtonValue;
                            SetBackGroundColour ('fillConsistency', 'other')
                    end
            end
        end
    end

    function SetProperties (styleNameGottlieb)
        switch styleNameGottlieb
            case 'Abstract'
                % Defining characteristics
                categories = {'legibility', 'symmetry', 'linearity', ...
                    'letterOverlap', 'useOfArrows', 'letterShapeConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'defining', 1)
                SetVisibilityRadioButtons (categories, 'On')
                SetVisibilityCheckBoxes (categories, 'Off')

                legibilityIllegibleButton.Value = 1; % A1
                symmetryAssymetricalButton.Value = 1; % C2
                linearityCurvedAndStraightButton.Value = 1; % F3
                letterOverlapIntertwinedButton.Value = 1; % I5
                useOfArrowsNonIntegralButton.Value = 1; % J2
                letterShapeConsistencyInconsistentButton.Value = 1; % K2

                % Predominant characteristics
                categories = {'numberOfColours', 'dimensionality', ...
                    'letterOutlines', 'letterStrokes'};
                SetBackGroundColourAndToggleButtonValue (categories, 'predominant', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                numberOfColoursAtLeastThreeColoursCheckBox.Value = 1; % B2
                numberOfColoursAtLeastFiveColoursCheckBox.Value = 1; % B3
                dimensionality2DimensionalCheckBox.Value = 1; % D1
                letterOutlinesHardOnlyCheckBox.Value = 1; % E1
                letterOutlinesInterruptedCheckBox.Value = 1; % E3
                letterStrokesVariedCheckBox.Value = 1; % G2

                % Other characteristics
                categories = {'negativeSpace', 'fillEffects', ...
                    'fillConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'other', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                negativeSpaceExaggeratedCheckBox.Value = 1; % H1
                negativeSpaceStandardCheckBox.Value = 1; % H2
                fillEffectsFadesCheckBox.Value = 1; % L2
                fillEffectsFillShapeCheckBox.Value = 1; % L3
                fillEffectsShinesCheckBox.Value = 1; % L5
                fillEffectsNoneCheckBox.Value = 1; % L6

                fillConsistencyConsistentCheckBox.Value = 1; % M1
                fillConsistencyInconsistentCheckBox.Value = 1; % M2

            case 'TFP'
                % Defining characteristics
                categories = {'legibility', 'numberOfColours', ...
                    'negativeSpace', 'letterOverlap', 'fillEffects', ...
                    'fillConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'defining', 1)
                SetVisibilityRadioButtons (categories, 'On')
                SetVisibilityCheckBoxes (categories, 'Off')

                legibilityPartiallyLegibleButton.Value = 1; % A2
                numberOfColoursAtLeastFiveColoursButton.Value = 1; % B3
                negativeSpaceStandardButton.Value = 1; % H2
                letterOverlapStandardButton.Value = 1; % I3
                fillEffectsFillShapeButton.Value = 1; % L3
                fillConsistencyInconsistentButton.Value = 1; % M2

                % Predominant characteristics
                categories = {'symmetry', 'dimensionality', ...
                    'letterOutlines', 'useOfArrows', 'letterShapeConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'predominant', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                symmetrySymmetricalCheckBox.Value = 1; % C1
                symmetryAssymetricalCheckBox.Value = 1; % C2
                dimensionality2DimensionalWith3DEffectsCheckBox.Value = 1; % D2
                letterOutlinesHardOnlyCheckBox.Value = 1; % E1
                useOfArrowsIntegralCheckBox.Value = 1; % J1
                letterShapeConsistencyConsistentCheckBox.Value = 1; % K1
                letterShapeConsistencyInconsistentCheckBox.Value = 1; % K2

                % Other characteristics
                categories = {'linearity', 'letterStrokes'};
                SetBackGroundColourAndToggleButtonValue (categories, 'other', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                linearityCurvedOnlyCheckBox.Value = 1; % F1
                linearityStraightOnlyCheckBox.Value = 1; % F2
                linearityCurvedAndStraightCheckBox.Value = 1; % F3
                letterStrokesUniformCheckBox.Value = 1; % G1
                letterStrokesVariedCheckBox.Value = 1; % G2

            case 'Silvers'
                % Defining characteristics
                categories = {'legibility', 'numberOfColours', 'symmetry',...
                    'dimensionality', 'letterOutlines', 'letterStrokes',...
                    'letterOverlap', 'useOfArrows',...
                    'letterShapeConsistency', 'fillConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'defining', 1)
                SetVisibilityRadioButtons (categories, 'On')
                SetVisibilityCheckBoxes (categories, 'Off')

                legibilityLegibleButton.Value = 1; % A3
                numberOfColoursTwoColoursButton.Value = 1; % B1
                symmetryAssymetricalButton.Value = 1; % C2
                dimensionality2DimensionalButton.Value = 1; % D1
                letterOutlinesHardOnlyButton.Value = 1; % E1
                letterStrokesUniformButton.Value = 1; % G1
                letterOverlapMinimalButton.Value = 1; % I2
                useOfArrowsNonIntegralButton.Value = 1; % J2
                letterShapeConsistencyConsistentButton.Value = 1; % K1
                fillConsistencyConsistentButton.Value = 1; % M1

                % Predominant characteristics
                categories = {'negativeSpace'};
                SetBackGroundColourAndToggleButtonValue (categories, 'predominant', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                negativeSpaceLimitedCheckBox.Value = 1; % H3

                % Other characteristics
                categories = {'linearity', 'fillEffects'};
                SetBackGroundColourAndToggleButtonValue (categories, 'other', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                linearityCurvedOnlyCheckBox.Value = 1; % F1
                linearityStraightOnlyCheckBox.Value = 1; % F2
                linearityCurvedAndStraightCheckBox.Value = 1; % F3

            case 'CTK'
                % Defining characteristics
                categories = {'legibility', 'symmetry', 'dimensionality',...
                    'letterOutlines', 'linearity', 'letterStrokes', ...
                    'negativeSpace', 'fillConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'defining', 1)
                SetVisibilityRadioButtons (categories, 'On')
                SetVisibilityCheckBoxes (categories, 'Off')

                legibilityLegibleButton.Value = 1; % A3
                symmetryAssymetricalButton.Value = 1; % C2
                dimensionality2DimensionalWith3DEffectsButton.Value = 1; % D2
                letterOutlinesHardOnlyButton.Value = 1; % E1
                linearityCurvedAndStraightButton.Value = 1; % F3
                letterStrokesVariedButton.Value = 1; % G2
                negativeSpaceStandardButton.Value = 1; % H2
                fillConsistencyConsistentButton.Value = 1; % M1

                % Predominant characteristics
                categories = {'numberOfColours', 'letterOverlap', ...
                    'useOfArrows', 'fillEffects'};
                SetBackGroundColourAndToggleButtonValue (categories, 'predominant', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                numberOfColoursAtLeastThreeColoursCheckBox.Value = 1; % B2
                letterOverlapStandardCheckBox.Value = 1; % I3
                useOfArrowsIntegralCheckBox.Value = 1; % J1
                fillEffectsFillShapeCheckBox.Value = 1; % L3

                % Other characteristics
                categories = {'letterShapeConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'other', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                letterShapeConsistencyConsistentCheckBox.Value = 1; % K1
                letterShapeConsistencyInconsistentCheckBox.Value = 1; % K2

            case 'Pichador'
                % Defining characteristics
                categories = {'legibility', 'letterStrokes', ...
                    'negativeSpace', 'letterOverlap', 'useOfArrows', ...
                    'letterShapeConsistency', 'fillEffects', 'fillConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'defining', 1)
                SetVisibilityRadioButtons (categories, 'On')
                SetVisibilityCheckBoxes (categories, 'Off')

                legibilityLegibleButton.Value = 1; % A3
                letterStrokesUniformButton.Value = 1; % G1
                negativeSpaceExaggeratedButton.Value = 1; % H1
                letterOverlapNoneButton.Value = 1; % I1
                useOfArrowsNonIntegralButton.Value = 1; % J2
                letterShapeConsistencyConsistentButton.Value = 1; % K1
                fillEffectsNoneButton.Value = 1; % L6
                fillConsistencyConsistentButton.Value = 1; % M1

                % Predominant characteristics
                categories = {'numberOfColours', 'dimensionality', ...
                    'letterOutlines', 'linearity'};
                SetBackGroundColourAndToggleButtonValue (categories, 'predominant', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                numberOfColoursAtLeastThreeColoursCheckBox.Value = 1; % B2
                dimensionality2DimensionalWith3DEffectsCheckBox.Value = 1; % D2
                letterOutlinesHardOnlyCheckBox.Value = 1; % E1
                linearityCurvedAndStraightCheckBox.Value = 1; % F3

                % Other characteristics
                categories = {'symmetry'};
                SetBackGroundColourAndToggleButtonValue (categories, 'other', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                symmetrySymmetricalCheckBox.Value = 1; % C1
                symmetryAssymetricalCheckBox.Value = 1; % C1

            case 'Semi-wild'
                % Defining characteristics
                categories = {'numberOfColours', 'dimensionality', ...
                    'letterOutlines', 'linearity', 'negativeSpace', ...
                    'letterOverlap', 'useOfArrows', ...
                    'letterShapeConsistency', 'fillConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'defining', 1)
                SetVisibilityRadioButtons (categories, 'On')
                SetVisibilityCheckBoxes (categories, 'Off')

                numberOfColoursAtLeastThreeColoursButton.Value = 1; % B2
                dimensionality2DimensionalWith3DEffectsButton.Value = 1; % D2
                letterOutlinesHardOnlyButton.Value = 1; % E1
                linearityCurvedAndStraightButton.Value = 1; % F3
                negativeSpaceStandardButton.Value = 1; % H2
                letterOverlapStandardButton.Value = 1; % I3
                useOfArrowsIntegralButton.Value = 1; % J1
                letterShapeConsistencyConsistentButton.Value = 1; % K1
                fillConsistencyConsistentButton.Value = 1; % M1

                % Predominant characteristics
                categories = {'legibility', 'letterStrokes', 'fillEffects'};
                SetBackGroundColourAndToggleButtonValue (categories, 'predominant', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                legibilityPartiallyLegibleCheckBox.Value = 1; % A2
                legibilityLegibleCheckBox.Value = 1; % A3
                letterStrokesUniformCheckBox.Value = 1; % G1
                fillEffectsFadesCheckBox.Value = 1; % L2
                fillEffectsFillShapeCheckBox.Value = 1; % L3
                fillEffectsShinesCheckBox.Value = 1; % L5

                % Other characteristics
                categories = {'symmetry'};
                SetBackGroundColourAndToggleButtonValue (categories, 'other', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                symmetrySymmetricalCheckBox.Value = 1; % C1
                symmetryAssymetricalCheckBox.Value = 1; % C22

            case 'Los Angeles Cholo-based'
                % Defining characteristics
                categories = {'numberOfColours', 'dimensionality', ...
                    'letterOutlines', 'linearity', 'letterStrokes', ...
                    'negativeSpace', 'letterOverlap', 'useOfArrows', ...
                    'letterShapeConsistency', 'fillEffects', ...
                    'fillConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'defining', 1)
                SetVisibilityRadioButtons (categories, 'On')
                SetVisibilityCheckBoxes (categories, 'Off')

                numberOfColoursAtLeastFiveColoursButton.Value = 1; % B3
                dimensionality2DimensionalWith3DEffectsButton.Value = 1; % D2
                letterOutlinesHardOnlyButton.Value = 1; % E1
                linearityCurvedAndStraightButton.Value = 1; % F3
                letterStrokesVariedButton.Value = 1; % G2
                negativeSpaceExaggeratedButton.Value = 1; % H1
                letterOverlapMinimalButton.Value = 1; % I2
                useOfArrowsIntegralButton.Value = 1; % J1
                letterShapeConsistencyConsistentButton.Value = 1; % K1
                fillEffectsFadesButton.Value = 1; % L2
                fillConsistencyConsistentButton.Value = 1; % M1

                %                 % Predominant characteristics
                %                 categories = {'fillEffects'};
                %                 SetBackGroundColourAndToggleButtonValue (categories, 'predominant', 1)
                %                 SetVisibilityRadioButtons (categories, 'Off')
                %                 SetVisibilityCheckBoxes (categories, 'On')
                %                 SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                % Other characteristics
                categories = {'legibility', 'symmetry'};
                SetBackGroundColourAndToggleButtonValue (categories, 'other', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                legibilityIllegibleCheckBox.Value = 1; % A1
                legibilityPartiallyLegibleCheckBox.Value = 1; % A2
                legibilityLegibleCheckBox.Value = 1; % A3

            case 'Swedish Train'
                % Defining characteristics
                categories = {'symmetry', 'dimensionality', ...
                    'negativeSpace', 'letterOverlap', 'useOfArrows', ...
                    'letterShapeConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'defining', 1)
                SetVisibilityRadioButtons (categories, 'On')
                SetVisibilityCheckBoxes (categories, 'Off')

                symmetryAssymetricalButton.Value = 1; % C2
                dimensionality2DimensionalWith3DEffectsButton.Value = 1; % D2
                negativeSpaceLimitedButton.Value = 1; % H3
                letterOverlapMinimalButton.Value = 1; % I2
                useOfArrowsNonIntegralButton.Value = 1; % J2
                letterShapeConsistencyInconsistentButton.Value = 1; % K2

                % Predominant characteristics
                categories = {'legibility', 'numberOfColours', ...
                    'letterOutlines', 'linearity', 'letterStrokes', ...
                    'fillEffects', 'fillConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'predominant', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                legibilityLegibleCheckBox.Value = 1; % A3
                numberOfColoursAtLeastFiveColoursCheckBox.Value = 1; % B3
                letterOutlinesHardOnlyCheckBox.Value = 1; % E1
                linearityCurvedOnlyCheckBox.Value = 1; % F1
                letterStrokesVariedCheckBox.Value = 1; % G2
                fillEffectsFadesCheckBox.Value = 1; % L2
                fillEffectsFillShapeCheckBox.Value = 1; % L3
                fillEffectsScrubFillsCheckBox.Value = 1; % L4
                fillEffectsShinesCheckBox.Value = 1; % L5
                fillConsistencyInconsistentCheckBox.Value = 1; % L5

                %                 % Other characteristics
                %                 categories = {'letterShapeConsistency'};
                %                 SetBackGroundColourAndToggleButtonValue (categories, 'other', 1)
                %                 SetVisibilityRadioButtons (categories, 'Off')
                %                 SetVisibilityCheckBoxes (categories, 'On')
                %                 SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

            case 'Neo Classic American Freight'
                % Defining characteristics
                categories = {'dimensionality', 'letterOutlines', ...
                    'negativeSpace', 'letterOverlap', 'useOfArrows', ...
                    'fillEffects', 'fillConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'defining', 1)
                SetVisibilityRadioButtons (categories, 'On')
                SetVisibilityCheckBoxes (categories, 'Off')

                dimensionality2DimensionalWith3DEffectsButton.Value = 1; % D2
                letterOutlinesHardOnlyButton.Value = 1; % E1
                negativeSpaceStandardButton.Value = 1; % H21
                letterOverlapStandardButton.Value = 1; % I3
                useOfArrowsNonIntegralButton.Value = 1; % J2
                fillEffectsShinesButton.Value = 1; % L5
                fillConsistencyConsistentButton.Value = 1; % M1

                % Predominant characteristics
                categories = {'legibility', 'numberOfColours', ...
                    'linearity', 'letterStrokes', 'letterShapeConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'predominant', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                legibilityLegibleCheckBox.Value = 1; % A3
                numberOfColoursAtLeastThreeColoursCheckBox.Value = 1; % B2
                numberOfColoursAtLeastFiveColoursCheckBox.Value = 1; % B3
                linearityCurvedAndStraightCheckBox.Value = 1; % F3
                letterStrokesUniformCheckBox.Value = 1; % G1
                letterShapeConsistencyConsistentCheckBox.Value = 1; % K1

                % Other characteristics
                categories = {'symmetry'};
                SetBackGroundColourAndToggleButtonValue (categories, 'other', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                symmetrySymmetricalCheckBox.Value = 1; % C1
                symmetryAssymetricalButton.Value = 1; % C2

            case 'East Coast Piecing Style'
                % Defining characteristics
                categories = {'dimensionality', 'linearity', ...
                    'letterStrokes', 'negativeSpace', ...
                    'letterShapeConsistency', 'fillEffects', ...
                    'fillConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'defining', 1)
                SetVisibilityRadioButtons (categories, 'On')
                SetVisibilityCheckBoxes (categories, 'Off')

                dimensionality2DimensionalWith3DEffectsButton.Value = 1; % D2
                linearityCurvedAndStraightButton.Value = 1; % F3
                letterStrokesVariedButton.Value = 1; % G2
                negativeSpaceLimitedButton.Value = 1; % H3
                letterShapeConsistencyConsistentButton.Value = 1; % K1
                fillEffectsFadesButton.Value = 1; % L2
                fillConsistencyConsistentButton.Value = 1; % M1

                % Predominant characteristics
                categories = {'legibility', 'numberOfColours', ...
                    'letterOutlines'};
                SetBackGroundColourAndToggleButtonValue (categories, 'predominant', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                legibilityIllegibleCheckBox.Value = 1; % A1
                legibilityLegibleCheckBox.Value = 1; % A3
                numberOfColoursAtLeastFiveColoursCheckBox.Value = 1; % B3
                letterOutlinesInterruptedCheckBox.Value = 1; % E3

                % Other characteristics
                categories = {'symmetry', 'letterOverlap', 'useOfArrows'};
                SetBackGroundColourAndToggleButtonValue (categories, 'other', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                symmetrySymmetricalCheckBox.Value = 1; % C1
                symmetryAssymetricalCheckBox.Value = 1; % C2
                letterOverlapStandardCheckBox.Value = 1; % I3
                letterOverlapIntertwinedCheckBox.Value = 1; % I5
                useOfArrowsIntegralCheckBox.Value = 1; % J1
                useOfArrowsNonIntegralCheckBox.Value = 1; % J2

            case 'No-neg'
                % Defining characteristics
                categories = {'dimensionality', 'letterOutlines', ...
                    'linearity', 'negativeSpace', 'useOfArrows', ...
                    'letterShapeConsistency', 'fillConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'defining', 1)
                SetVisibilityRadioButtons (categories, 'On')
                SetVisibilityCheckBoxes (categories, 'Off')

                dimensionalityReliefEffectButton.Value = 1; % D3
                letterOutlinesInterruptedButton.Value = 1; % E3
                linearityCurvedAndStraightButton.Value = 1; % F3
                negativeSpaceLimitedButton.Value = 1; % H3
                useOfArrowsNonIntegralButton.Value = 1; % J2
                letterShapeConsistencyInconsistentButton.Value = 1; % K2
                fillConsistencyConsistentButton.Value = 1; % M1

                % Predominant characteristics
                categories = {'legibility', 'numberOfColours'};
                SetBackGroundColourAndToggleButtonValue (categories, 'predominant', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                legibilityPartiallyLegibleCheckBox.Value = 1; % A2
                numberOfColoursAtLeastThreeColoursCheckBox.Value = 1; % B2
                numberOfColoursAtLeastFiveColoursCheckBox.Value = 1; % B3

                % Other characteristics
                categories = { 'symmetry', 'letterStrokes', ...
                    'letterOverlap', 'fillEffects'};
                SetBackGroundColourAndToggleButtonValue (categories, 'other', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                symmetrySymmetricalCheckBox.Value = 1; % C1
                symmetryAssymetricalCheckBox.Value = 1; % C2
                letterStrokesUniformCheckBox.Value = 1; % G1
                letterStrokesVariedCheckBox.Value = 1; % G2
                letterOverlapMinimalCheckBox.Value = 1; % I2
                letterOverlapStandardCheckBox.Value = 1; % I3
                fillEffectsFadesCheckBox.Value = 1; % L2
                fillEffectsFillShapeCheckBox.Value = 1; % L3
                fillEffectsShinesCheckBox.Value = 1; % L5
                fillEffectsNoneCheckBox.Value = 1; % L6

            case 'Dimensional'
                % Defining characteristics
                categories = {'dimensionality', 'letterOutlines', ...
                    'useOfArrows', 'fillEffects', 'fillConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'defining', 1)
                SetVisibilityRadioButtons (categories, 'On')
                SetVisibilityCheckBoxes (categories, 'Off')

                dimensionality3DimensionalButton.Value = 1; % D4
                letterOutlinesImpliedButton.Value = 1; % E2
                useOfArrowsNonIntegralButton.Value = 1; % J2
                fillEffectsDirectionalHighlightsButton.Value = 1; % L1
                fillEffectsFadesButton.Value = 1; % L2
                fillConsistencyConsistentButton.Value = 1; % M1

                % Predominant characteristics
                categories = {'numberOfColours', 'linearity', ...
                    'negativeSpace', 'letterOverlap', 'fillEffects'};
                SetBackGroundColourAndToggleButtonValue (categories, 'predominant', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                numberOfColoursAtLeastFiveColoursCheckBox.Value = 1; % B3
                linearityCurvedAndStraightCheckBox.Value = 1; % F3
                negativeSpaceLimitedCheckBox.Value = 1; % H3
                letterOverlapInterlockingCheckBox.Value = 1; % I4
                fillEffectsDirectionalHighlightsCheckBox.Value = 1; % L1
                fillEffectsFadesCheckBox.Value = 1; % L2
                fillEffectsFillShapeCheckBox.Value = 1; % L3

                % Other characteristics
                categories = {'legibility', 'symmetry', 'letterStrokes',...
                    'letterShapeConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'other', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                legibilityIllegibleCheckBox.Value = 1; % A2
                legibilityPartiallyLegibleCheckBox.Value = 1; % A3
                symmetrySymmetricalCheckBox.Value = 1; % C1
                symmetryAssymetricalCheckBox.Value = 1; % C2
                letterStrokesUniformCheckBox.Value = 1; % G1
                letterStrokesVariedCheckBox.Value = 1; % G2
                letterShapeConsistencyConsistentCheckBox.Value = 1; % K1
                letterShapeConsistencyInconsistentCheckBox.Value = 1; % K2

            case 'Dortmund'
                % Defining characteristics
                categories = {'letterOutlines', 'letterStrokes', ...
                    'fillConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'defining', 1)
                SetVisibilityRadioButtons (categories, 'On')
                SetVisibilityCheckBoxes (categories, 'Off')

                letterOutlinesHardOnlyButton.Value = 1; % A1
                letterStrokesUniformButton.Value = 1; % G1
                fillConsistencyConsistentButton.Value = 1; % M1

                % Predominant characteristics
                categories = {'numberOfColours', 'dimensionality', ...
                    'linearity', 'useOfArrows'};
                SetBackGroundColourAndToggleButtonValue (categories, 'predominant', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                numberOfColoursAtLeastThreeColoursCheckBox.Value = 1; % B2
                dimensionality2DimensionalWith3DEffectsCheckBox.Value = 1; % D2
                linearityStraightOnlyCheckBox.Value = 1; % F2
                linearityCurvedAndStraightCheckBox.Value = 1; % F3
                useOfArrowsNonIntegralCheckBox.Value = 1; % J2

                % Other characteristics
                categories = {'legibility', 'symmetry', 'negativeSpace',...
                    'letterOverlap', 'letterShapeConsistency', 'fillEffects'};
                SetBackGroundColourAndToggleButtonValue (categories, 'other', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                legibilityIllegibleCheckBox.Value = 1; % A1
                legibilityPartiallyLegibleCheckBox.Value = 1; % A2
                legibilityLegibleCheckBox.Value = 1; % A3
                symmetrySymmetricalCheckBox.Value = 1; % C1
                symmetryAssymetricalCheckBox.Value = 1; % C2
                negativeSpaceExaggeratedCheckBox.Value = 1; % H1
                negativeSpaceStandardCheckBox.Value = 1; % H2
                negativeSpaceLimitedCheckBox.Value = 1; % H3
                letterOverlapNoneCheckBox.Value = 1; % I1
                letterOverlapMinimalCheckBox.Value = 1; % I2
                letterOverlapStandardCheckBox.Value = 1; % I3
                letterShapeConsistencyConsistentCheckBox.Value = 1; % K1
                letterShapeConsistencyInconsistentCheckBox.Value = 1; % K2
                fillEffectsFadesCheckBox.Value = 1; % L2
                fillEffectsFillShapeCheckBox.Value = 1; % L3
                fillEffectsScrubFillsCheckBox.Value = 1; % L4
                fillEffectsShinesCheckBox.Value = 1; % L5
                fillEffectsNoneCheckBox.Value = 1; % L6

            case 'Wild'
                % Defining characteristics
                categories = {'letterOutlines', 'letterOverlap', ...
                    'useOfArrows', 'fillConsistency'};
                SetBackGroundColourAndToggleButtonValue (categories, 'defining', 1)
                SetVisibilityRadioButtons (categories, 'On')
                SetVisibilityCheckBoxes (categories, 'Off')

                letterOutlinesHardOnlyButton.Value = 1; % E1
                letterOverlapIntertwinedButton.Value = 1; % I5
                useOfArrowsIntegralButton.Value = 1; % J1
                fillConsistencyConsistentButton.Value = 1; % M1

                % Predominant characteristics
                categories = {'legibility', 'numberOfColours', 'symmetry', ...
                    'dimensionality', 'linearity', 'letterStrokes', ...
                    'negativeSpace', 'letterShapeConsistency', ...
                    'fillEffects'};
                SetBackGroundColourAndToggleButtonValue (categories, 'predominant', 1)
                SetVisibilityRadioButtons (categories, 'Off')
                SetVisibilityCheckBoxes (categories, 'On')
                SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.

                legibilityPartiallyLegibleCheckBox.Value = 1; % A2
                numberOfColoursAtLeastThreeColoursCheckBox.Value = 1; % B2
                symmetrySymmetricalCheckBox.Value = 1; % C1
                dimensionality2DimensionalCheckBox.Value = 1; % D1
                dimensionality2DimensionalWith3DEffectsCheckBox.Value = 1; % D2
                linearityCurvedAndStraightCheckBox.Value = 1; % F3
                letterStrokesVariedCheckBox.Value = 1; % G2
                negativeSpaceStandardCheckBox.Value = 1; % H2
                letterShapeConsistencyInconsistentCheckBox.Value = 1; % K2
                fillEffectsFadesCheckBox.Value = 1; % L2
                fillEffectsFillShapeCheckBox.Value = 1; % L3
                fillEffectsShinesCheckBox.Value = 1; % L5

                % Other characteristics
                %                 categories = {'legibility', 'numberOfColours', 'symmetry', ...
                %                     'dimensionality', 'letterOutlines', 'linearity', 'letterStrokes', ...
                %                     'negativeSpace', 'letterOverlap', 'useOfArrows', ...
                %                     'letterShapeConsistency', 'fillEffects', 'fillConsistency'};
                %                 SetBackGroundColourAndToggleButtonValue (categories, 'other', 1)
                %                 SetVisibilityRadioButtons (categories, 'Off')
                %                 SetVisibilityCheckBoxes (categories, 'On')
                %                 SetValueCheckBoxes (categories, 0); % Set all checkboxes to 0.
        end
    end

    function GetStyleString (varargin)
        styleString = [];
        if legibilityDefiningToggleButton.Value
            styleString = [styleString, legibilityGroup.UserData];
        end
        if numberOfColoursDefiningToggleButton.Value
            styleString = [styleString, numberOfColoursGroup.UserData];
        end
        if symmetryDefiningToggleButton.Value
            styleString = [styleString, symmetryGroup.UserData];
        end
        if dimensionalityDefiningToggleButton.Value
            styleString = [styleString, dimensionalityGroup.UserData];
        end
        if letterOutlinesDefiningToggleButton.Value
            styleString = [styleString, letterOutlinesGroup.UserData];
        end
        if linearityDefiningToggleButton.Value
            styleString = [styleString, linearityGroup.UserData];
        end
        if letterStrokesDefiningToggleButton.Value
            styleString = [styleString, letterStrokesGroup.UserData];
        end
        if negativeSpaceDefiningToggleButton.Value
            styleString = [styleString, negativeSpaceGroup.UserData];
        end
        if letterOverlapDefiningToggleButton.Value
            styleString = [styleString, letterOverlapGroup.UserData];
        end
        if useOfArrowsDefiningToggleButton.Value
            styleString = [styleString, useOfArrowsGroup.UserData];
        end
        if letterShapeConsistencyDefiningToggleButton.Value
            styleString = [styleString, letterShapeConsistencyGroup.UserData];
        end
        if fillEffectsDefiningToggleButton.Value
            styleString = [styleString, fillEffectsGroup.UserData];
        end
        if fillConsistencyDefiningToggleButton.Value
            styleString = [styleString, fillConsistencyGroup.UserData];
        end

        % Update the textbox in the upper right frame.
        styleStringDisplayText.String = styleString;

        % Check if this string matches a Gotlieb style. If so, make it
        % clear.
        MatchWithGottliebStyle
    end

    function GetPredominantCharacteristicsString (varargin)
        predominantCharacteristicsString = [];
        if legibilityPredominantToggleButton.Value
            predominantCharacteristicsString = [predominantCharacteristicsString, legibilityPanel.UserData];
        end
        if numberOfColoursPredominantToggleButton.Value
            predominantCharacteristicsString = [predominantCharacteristicsString, numberOfColoursPanel.UserData];
        end
        if symmetryPredominantToggleButton.Value
            predominantCharacteristicsString = [predominantCharacteristicsString, symmetryPanel.UserData];
        end
        if dimensionalityPredominantToggleButton.Value
            predominantCharacteristicsString = [predominantCharacteristicsString, dimensionalityPanel.UserData];
        end
        if letterOutlinesPredominantToggleButton.Value
            predominantCharacteristicsString = [predominantCharacteristicsString, letterOutlinesPanel.UserData];
        end
        if linearityPredominantToggleButton.Value
            predominantCharacteristicsString = [predominantCharacteristicsString, linearityPanel.UserData];
        end
        if letterStrokesPredominantToggleButton.Value
            predominantCharacteristicsString = [predominantCharacteristicsString, letterStrokesPanel.UserData];
        end
        if negativeSpacePredominantToggleButton.Value
            predominantCharacteristicsString = [predominantCharacteristicsString, negativeSpacePanel.UserData];
        end
        if letterOverlapPredominantToggleButton.Value
            predominantCharacteristicsString = [predominantCharacteristicsString, letterOverlapPanel.UserData];
        end
        if useOfArrowsPredominantToggleButton.Value
            predominantCharacteristicsString = [predominantCharacteristicsString, useOfArrowsPanel.UserData];
        end
        if letterShapeConsistencyPredominantToggleButton.Value
            predominantCharacteristicsString = [predominantCharacteristicsString, letterShapeConsistencyPanel.UserData];
        end
        if fillEffectsPredominantToggleButton.Value
            predominantCharacteristicsString = [predominantCharacteristicsString, fillEffectsPanel.UserData];
        end
        if fillConsistencyPredominantToggleButton.Value
            predominantCharacteristicsString = [predominantCharacteristicsString, fillConsistencyPanel.UserData];
        end

        % Update the textbox in the upper right frame.
        predominantCharacteristicsStringDisplayText.String = ...
            predominantCharacteristicsString;
    end

    function GetOtherCharacteristicsString (varargin)
        otherCharacteristicsString = [];
        if legibilityOtherToggleButton.Value
            otherCharacteristicsString = [otherCharacteristicsString, legibilityPanel.UserData];
        end
        if numberOfColoursOtherToggleButton.Value
            otherCharacteristicsString = [otherCharacteristicsString, numberOfColoursPanel.UserData];
        end
        if symmetryOtherToggleButton.Value
            otherCharacteristicsString = [otherCharacteristicsString, symmetryPanel.UserData];
        end
        if dimensionalityOtherToggleButton.Value
            otherCharacteristicsString = [otherCharacteristicsString, dimensionalityPanel.UserData];
        end
        if letterOutlinesOtherToggleButton.Value
            otherCharacteristicsString = [otherCharacteristicsString, letterOutlinesPanel.UserData];
        end
        if linearityOtherToggleButton.Value
            otherCharacteristicsString = [otherCharacteristicsString, linearityPanel.UserData];
        end
        if letterStrokesOtherToggleButton.Value
            otherCharacteristicsString = [otherCharacteristicsString, letterStrokesPanel.UserData];
        end
        if negativeSpaceOtherToggleButton.Value
            otherCharacteristicsString = [otherCharacteristicsString, negativeSpacePanel.UserData];
        end
        if letterOverlapOtherToggleButton.Value
            otherCharacteristicsString = [otherCharacteristicsString, letterOverlapPanel.UserData];
        end
        if useOfArrowsOtherToggleButton.Value
            otherCharacteristicsString = [otherCharacteristicsString, useOfArrowsPanel.UserData];
        end
        if letterShapeConsistencyOtherToggleButton.Value
            otherCharacteristicsString = [otherCharacteristicsString, letterShapeConsistencyPanel.UserData];
        end
        if fillEffectsOtherToggleButton.Value
            otherCharacteristicsString = [otherCharacteristicsString, fillEffectsPanel.UserData];
        end
        if fillConsistencyOtherToggleButton.Value
            otherCharacteristicsString = [otherCharacteristicsString, fillConsistencyPanel.UserData];
        end

        % Update the textbox in the upper right frame.
        otherCharacteristicsStringDisplayText.String = ...
            otherCharacteristicsString;
    end

    function MatchWithGottliebStyle (varargin)
        % Check if the styleString occurs in the cell holding all Gottlieb
        % styles.
        if any(strcmpi(styleNotationsGottlieb, styleString))
            indexGottlieb = ...
                strcmpi(styleNotationsGottlieb, styleString);
            styleGottliebName = styleNamesGottlieb{indexGottlieb};

            styleGottliebStringDisplayText.String = ...
                ['Yes - ', styleGottliebName];
            styleGottliebStringDisplayText.FontWeight = 'bold';
            styleGottliebStringDisplayText.ForegroundColor = ...
                styleMatchColour;
        elseif strcmpi('D4E2J2M1', styleString)
            styleGottliebStringDisplayText.String = ...
                'Yes - Dimensional (but see remark)';
            styleGottliebStringDisplayText.FontWeight = 'bold';
            styleGottliebStringDisplayText.ForegroundColor = ...
                styleMatchColour;
        else
            styleGottliebStringDisplayText.String = 'No';
            styleGottliebStringDisplayText.FontWeight = 'normal';
            styleGottliebStringDisplayText.ForegroundColor = [0 0 0];
        end
    end

    function ShowBookCover (varargin)
        figure('MenuBar', 'none', 'ToolBar', 'none', ...
            'NumberTitle', 'off', 'Name', ...
            ['This is the cover of the Gottlieb book from 2008, ',...
            'ISBN: 978-0-7864-3436-7'])
        imshow('coverBookGottlieb.jpg')
    end

    function Close (varargin)
        delete(mainGUIWindow)
    end

    function CloseAndOpen (varargin)
        Close
        GottliebStylesVisualiser
    end

    function About (varargin)
        message = sprintf(['This program visualises the graffiti style ', ...
            'classification Lisa Gottlieb published in her book:\n', ...
            'Gottlieb, L. (2008). Graffiti art styles: A ', ...
            'classification system and theoretical analysis. ', ...
            'McFarland & Company: Jefferson, pp. viii, 212.\n', ...
            'ISBN: 978-0-7864-3436-7\n\n     > version %s.\n     ',...
            '> Geert J. Verhoeven | project INDIGO'], ...
            currentVersionGUI);
        uiwait(msgbox (message, 'About this small program', 'help', 'Modal'));
    end

end